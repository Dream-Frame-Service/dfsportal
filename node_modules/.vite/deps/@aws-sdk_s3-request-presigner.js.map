{
  "version": 3,
  "sources": ["../../@aws-sdk/util-format-url/dist-es/index.js", "../../@aws-sdk/s3-request-presigner/dist-es/constants.js", "../../@aws-sdk/s3-request-presigner/dist-es/presigner.js", "../../@aws-sdk/s3-request-presigner/dist-es/getSignedUrl.js"],
  "sourcesContent": ["import { buildQueryString } from \"@smithy/querystring-builder\";\r\nexport function formatUrl(request) {\r\n    const { port, query } = request;\r\n    let { protocol, path, hostname } = request;\r\n    if (protocol && protocol.slice(-1) !== \":\") {\r\n        protocol += \":\";\r\n    }\r\n    if (port) {\r\n        hostname += `:${port}`;\r\n    }\r\n    if (path && path.charAt(0) !== \"/\") {\r\n        path = `/${path}`;\r\n    }\r\n    let queryString = query ? buildQueryString(query) : \"\";\r\n    if (queryString && queryString[0] !== \"?\") {\r\n        queryString = `?${queryString}`;\r\n    }\r\n    let auth = \"\";\r\n    if (request.username != null || request.password != null) {\r\n        const username = request.username ?? \"\";\r\n        const password = request.password ?? \"\";\r\n        auth = `${username}:${password}@`;\r\n    }\r\n    let fragment = \"\";\r\n    if (request.fragment) {\r\n        fragment = `#${request.fragment}`;\r\n    }\r\n    return `${protocol}//${auth}${hostname}${path}${queryString}${fragment}`;\r\n}\r\n", "export const UNSIGNED_PAYLOAD = \"UNSIGNED-PAYLOAD\";\r\nexport const SHA256_HEADER = \"X-Amz-Content-Sha256\";\r\nexport const ALGORITHM_QUERY_PARAM = \"X-Amz-Algorithm\";\r\nexport const CREDENTIAL_QUERY_PARAM = \"X-Amz-Credential\";\r\nexport const AMZ_DATE_QUERY_PARAM = \"X-Amz-Date\";\r\nexport const SIGNED_HEADERS_QUERY_PARAM = \"X-Amz-SignedHeaders\";\r\nexport const EXPIRES_QUERY_PARAM = \"X-Amz-Expires\";\r\nexport const HOST_HEADER = \"host\";\r\nexport const ALGORITHM_IDENTIFIER = \"AWS4-HMAC-SHA256\";\r\n", "import { SignatureV4MultiRegion } from \"@aws-sdk/signature-v4-multi-region\";\r\nimport { SHA256_HEADER, UNSIGNED_PAYLOAD } from \"./constants\";\r\nexport class S3RequestPresigner {\r\n    signer;\r\n    constructor(options) {\r\n        const resolvedOptions = {\r\n            service: options.signingName || options.service || \"s3\",\r\n            uriEscapePath: options.uriEscapePath || false,\r\n            applyChecksum: options.applyChecksum || false,\r\n            ...options,\r\n        };\r\n        this.signer = new SignatureV4MultiRegion(resolvedOptions);\r\n    }\r\n    presign(requestToSign, { unsignableHeaders = new Set(), hoistableHeaders = new Set(), unhoistableHeaders = new Set(), ...options } = {}) {\r\n        this.prepareRequest(requestToSign, {\r\n            unsignableHeaders,\r\n            unhoistableHeaders,\r\n            hoistableHeaders,\r\n        });\r\n        return this.signer.presign(requestToSign, {\r\n            expiresIn: 900,\r\n            unsignableHeaders,\r\n            unhoistableHeaders,\r\n            ...options,\r\n        });\r\n    }\r\n    presignWithCredentials(requestToSign, credentials, { unsignableHeaders = new Set(), hoistableHeaders = new Set(), unhoistableHeaders = new Set(), ...options } = {}) {\r\n        this.prepareRequest(requestToSign, {\r\n            unsignableHeaders,\r\n            unhoistableHeaders,\r\n            hoistableHeaders,\r\n        });\r\n        return this.signer.presignWithCredentials(requestToSign, credentials, {\r\n            expiresIn: 900,\r\n            unsignableHeaders,\r\n            unhoistableHeaders,\r\n            ...options,\r\n        });\r\n    }\r\n    prepareRequest(requestToSign, { unsignableHeaders = new Set(), unhoistableHeaders = new Set(), hoistableHeaders = new Set(), } = {}) {\r\n        unsignableHeaders.add(\"content-type\");\r\n        Object.keys(requestToSign.headers)\r\n            .map((header) => header.toLowerCase())\r\n            .filter((header) => header.startsWith(\"x-amz-server-side-encryption\"))\r\n            .forEach((header) => {\r\n            if (!hoistableHeaders.has(header)) {\r\n                unhoistableHeaders.add(header);\r\n            }\r\n        });\r\n        requestToSign.headers[SHA256_HEADER] = UNSIGNED_PAYLOAD;\r\n        const currentHostHeader = requestToSign.headers.host;\r\n        const port = requestToSign.port;\r\n        const expectedHostHeader = `${requestToSign.hostname}${requestToSign.port != null ? \":\" + port : \"\"}`;\r\n        if (!currentHostHeader || (currentHostHeader === requestToSign.hostname && requestToSign.port != null)) {\r\n            requestToSign.headers.host = expectedHostHeader;\r\n        }\r\n    }\r\n}\r\n", "import { formatUrl } from \"@aws-sdk/util-format-url\";\r\nimport { getEndpointFromInstructions } from \"@smithy/middleware-endpoint\";\r\nimport { HttpRequest } from \"@smithy/protocol-http\";\r\nimport { S3RequestPresigner } from \"./presigner\";\r\nexport const getSignedUrl = async (client, command, options = {}) => {\r\n    let s3Presigner;\r\n    let region;\r\n    if (typeof client.config.endpointProvider === \"function\") {\r\n        const endpointV2 = await getEndpointFromInstructions(command.input, command.constructor, client.config);\r\n        const authScheme = endpointV2.properties?.authSchemes?.[0];\r\n        if (authScheme?.name === \"sigv4a\") {\r\n            region = authScheme?.signingRegionSet?.join(\",\");\r\n        }\r\n        else {\r\n            region = authScheme?.signingRegion;\r\n        }\r\n        s3Presigner = new S3RequestPresigner({\r\n            ...client.config,\r\n            signingName: authScheme?.signingName,\r\n            region: async () => region,\r\n        });\r\n    }\r\n    else {\r\n        s3Presigner = new S3RequestPresigner(client.config);\r\n    }\r\n    const presignInterceptMiddleware = (next, context) => async (args) => {\r\n        const { request } = args;\r\n        if (!HttpRequest.isInstance(request)) {\r\n            throw new Error(\"Request to be presigned is not an valid HTTP request.\");\r\n        }\r\n        delete request.headers[\"amz-sdk-invocation-id\"];\r\n        delete request.headers[\"amz-sdk-request\"];\r\n        delete request.headers[\"x-amz-user-agent\"];\r\n        let presigned;\r\n        const presignerOptions = {\r\n            ...options,\r\n            signingRegion: options.signingRegion ?? context[\"signing_region\"] ?? region,\r\n            signingService: options.signingService ?? context[\"signing_service\"],\r\n        };\r\n        if (context.s3ExpressIdentity) {\r\n            presigned = await s3Presigner.presignWithCredentials(request, context.s3ExpressIdentity, presignerOptions);\r\n        }\r\n        else {\r\n            presigned = await s3Presigner.presign(request, presignerOptions);\r\n        }\r\n        return {\r\n            response: {},\r\n            output: {\r\n                $metadata: { httpStatusCode: 200 },\r\n                presigned,\r\n            },\r\n        };\r\n    };\r\n    const middlewareName = \"presignInterceptMiddleware\";\r\n    const clientStack = client.middlewareStack.clone();\r\n    clientStack.addRelativeTo(presignInterceptMiddleware, {\r\n        name: middlewareName,\r\n        relation: \"before\",\r\n        toMiddleware: \"awsAuthMiddleware\",\r\n        override: true,\r\n    });\r\n    const handler = command.resolveMiddleware(clientStack, client.config, {});\r\n    const { output } = await handler({ input: command.input });\r\n    const { presigned } = output;\r\n    return formatUrl(presigned);\r\n};\r\n"],
  "mappings": "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",
  "names": ["presigned"]
}
