{"version":3,"file":"databaseService-D7YJ8-AF.js","sources":["../../src/services/databaseService.ts"],"sourcesContent":["import { SupabaseService, AuthService, EmailService } from '@/services/supabaseService';\n\n/* --------------------------------------------------------------\n   Table ID to table name mapping\n   This maintains compatibility with the existing numeric table IDs\n-----------------------------------------------------------------*/\nconst TABLE_MAP: Record<string | number, string> = {\n    11725: \"user_profiles\",\n    11726: \"products\", \n    11727: \"employees\",\n    11728: \"salary\",\n    11729: \"vendors\",\n    11730: \"orders\",\n    11731: \"licenses\",\n    12356: \"sales_reports\",\n    12599: \"stations\",\n    12612: \"sms_contacts\",\n    12613: \"sms_history\",\n    12640: \"sms_providers\",\n    12641: \"sms_templates\",\n    12642: \"alert_schedules\",\n    12706: \"audit_logs\",\n    11756: \"product_logs\",\n    12196: \"notifications\",\n    12611: \"sms_settings\",\n};\n\ntype TableId = keyof typeof TABLE_MAP | string | number;\n\n/* --------------------------------------------------------------\n   Convert ezsite-style filters to Supabase filters\n-----------------------------------------------------------------*/\nconst convertFilters = (filters: any[] = []) => {\n    return filters.map(filter => {\n        const { name, op, value } = filter;\n        let operator = 'eq';\n        \n        switch (op) {\n            case 'Equal':\n                operator = 'eq';\n                break;\n            case 'StringContains':\n                operator = 'ilike';\n                break;\n            case 'GreaterThan':\n                operator = 'gt';\n                break;\n            case 'LessThan':\n                operator = 'lt';\n                break;\n            case 'GreaterThanOrEqual':\n                operator = 'gte';\n                break;\n            case 'LessThanOrEqual':\n                operator = 'lte';\n                break;\n            default:\n                operator = 'eq';\n        }\n        \n        return {\n            column: name,\n            operator,\n            value: op === 'StringContains' ? `%${value}%` : value\n        };\n    });\n};\n\n/* --------------------------------------------------------------\n   Database Service - Direct Supabase API calls\n-----------------------------------------------------------------*/\nexport class DatabaseService {\n    \n    // List records with pagination (replaces ezsite tablePage)\n    static async tablePage<T extends TableId>(\n        tableId: T,\n        options: {\n            PageNo?: number;\n            PageSize?: number;\n            OrderByField?: string;\n            IsAsc?: boolean;\n            Filters?: any[];\n            Select?: string;\n        } = {}\n    ) {\n        const {\n            PageNo = 1,\n            PageSize = 100,\n            OrderByField = 'id',\n            IsAsc = false,\n            Filters = [],\n            Select = '*'\n        } = options;\n        \n        const tableName = TABLE_MAP[tableId] || tableId.toString();\n        const supabaseFilters = convertFilters(Filters);\n        \n        try {\n            const { data, count, error } = await SupabaseService.readRecords(\n                tableName as any,\n                {\n                    page: PageNo,\n                    pageSize: PageSize,\n                    orderBy: OrderByField as any,\n                    ascending: IsAsc,\n                    filters: supabaseFilters,\n                    select: Select\n                }\n            );\n            \n            if (error) {\n                return { data: null, error };\n            }\n            \n            return {\n                data: {\n                    List: data,\n                    VirtualCount: count\n                },\n                error: null\n            };\n        } catch (err) {\n            console.error(`Error in tablePage for ${tableName}:`, err);\n            return {\n                data: null,\n                error: err instanceof Error ? err.message : 'Unknown error'\n            };\n        }\n    }\n    \n    // Create record (replaces ezsite tableCreate)\n    static async tableCreate<T extends TableId>(tableId: T, payload: any) {\n        const tableName = TABLE_MAP[tableId] || tableId.toString();\n        \n        try {\n            const data = await SupabaseService.createRecord(tableName as any, payload);\n            return { data, error: null };\n        } catch (err) {\n            console.error(`Error in tableCreate for ${tableName}:`, err);\n            return {\n                data: null,\n                error: err instanceof Error ? err.message : 'Unknown error'\n            };\n        }\n    }\n    \n    // Update record (replaces ezsite tableUpdate)\n    static async tableUpdate<T extends TableId>(tableId: T, payload: any) {\n        const tableName = TABLE_MAP[tableId] || tableId.toString();\n        const { ID, id = ID, ...rest } = payload;\n        \n        try {\n            const result = await SupabaseService.updateRecord(tableName as any, id, rest);\n            return result;\n        } catch (err) {\n            console.error(`Error in tableUpdate for ${tableName}:`, err);\n            return {\n                data: null,\n                error: err instanceof Error ? err.message : 'Unknown error'\n            };\n        }\n    }\n    \n    // Delete record (replaces ezsite tableDelete)\n    static async tableDelete<T extends TableId>(tableId: T, { ID }: { ID: number }) {\n        const tableName = TABLE_MAP[tableId] || tableId.toString();\n        \n        try {\n            const result = await SupabaseService.deleteRecord(tableName as any, ID);\n            return result;\n        } catch (err) {\n            console.error(`Error in tableDelete for ${tableName}:`, err);\n            return {\n                error: err instanceof Error ? err.message : 'Unknown error'\n            };\n        }\n    }\n    \n    // File upload (replaces ezsite upload)\n    static async upload({ filename, file }: { filename: string; file: File }) {\n        try {\n            const path = `${Date.now()}_${filename}`;\n            const result = await SupabaseService.uploadFile('uploads', path, file);\n            \n            if (result.error) {\n                return { data: null, error: result.error };\n            }\n            \n            // Return the file path as the data (similar to ezsite behavior)\n            return { data: result.data?.path, error: null };\n        } catch (err) {\n            console.error('Error in upload:', err);\n            return {\n                data: null,\n                error: err instanceof Error ? err.message : 'Unknown error'\n            };\n        }\n    }\n    \n    // Send email (replaces ezsite sendEmail)\n    static async sendEmail(emailData: {\n        from: string;\n        to: string | string[];\n        subject: string;\n        html: string;\n        text?: string;\n    }) {\n        try {\n            return await EmailService.sendEmail(emailData);\n        } catch (err) {\n            console.error('Error in sendEmail:', err);\n            return {\n                data: null,\n                error: err instanceof Error ? err.message : 'Unknown error'\n            };\n        }\n    }\n    \n    // User registration (replaces ezsite register)\n    static async register(credentials: { email: string; password: string }) {\n        try {\n            return await AuthService.register(credentials);\n        } catch (err) {\n            console.error('Error in register:', err);\n            return {\n                data: null,\n                error: err instanceof Error ? err.message : 'Unknown error'\n            };\n        }\n    }\n    \n    // Get current user info (replaces ezsite getUserInfo)\n    static async getUserInfo() {\n        try {\n            return await AuthService.getCurrentUser();\n        } catch (err) {\n            console.error('Error in getUserInfo:', err);\n            return {\n                data: null,\n                error: err instanceof Error ? err.message : 'Unknown error'\n            };\n        }\n    }\n}\n\n// Export as default for easy importing\nexport default DatabaseService;\n"],"names":[],"mappings":"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"}