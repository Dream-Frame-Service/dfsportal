import * as z from "zod";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
export type PatchTeamRoles2 = {
    accessGroupId: string;
};
export declare const PatchTeamRoles1: {
    readonly Owner: "OWNER";
    readonly Member: "MEMBER";
    readonly Developer: "DEVELOPER";
    readonly Security: "SECURITY";
    readonly Billing: "BILLING";
    readonly Viewer: "VIEWER";
    readonly Contributor: "CONTRIBUTOR";
};
export type PatchTeamRoles1 = ClosedEnum<typeof PatchTeamRoles1>;
export type PatchTeamRoles = PatchTeamRoles2 | PatchTeamRoles1;
export type PatchTeamSaml = {
    /**
     * Require that members of the team use SAML Single Sign-On.
     */
    enforced?: boolean | undefined;
    /**
     * Directory groups to role or access group mappings.
     */
    roles?: {
        [k: string]: PatchTeamRoles2 | PatchTeamRoles1;
    } | undefined;
};
/**
 * Whether or not remote caching is enabled for the team
 */
export type PatchTeamRemoteCaching = {
    /**
     * Enable or disable remote caching for the team.
     */
    enabled?: boolean | undefined;
};
export type PatchTeamRequestBody = {
    /**
     * The hash value of an uploaded image.
     */
    avatar?: string | undefined;
    /**
     * A short text that describes the team.
     */
    description?: string | undefined;
    emailDomain?: string | null | undefined;
    /**
     * The name of the team.
     */
    name?: string | undefined;
    /**
     * Suffix that will be used for all preview deployments.
     */
    previewDeploymentSuffix?: string | null | undefined;
    /**
     * Create a new invite code and replace the current one.
     */
    regenerateInviteCode?: boolean | undefined;
    saml?: PatchTeamSaml | undefined;
    /**
     * A new slug for the team.
     */
    slug?: string | undefined;
    /**
     * Enable preview toolbar: one of on, off or default.
     */
    enablePreviewFeedback?: string | undefined;
    /**
     * Enable production toolbar: one of on, off or default.
     */
    enableProductionFeedback?: string | undefined;
    /**
     * Sensitive environment variable policy: one of on, off or default.
     */
    sensitiveEnvironmentVariablePolicy?: string | undefined;
    /**
     * Whether or not remote caching is enabled for the team
     */
    remoteCaching?: PatchTeamRemoteCaching | undefined;
    /**
     * Display or hide IP addresses in Monitoring queries.
     */
    hideIpAddresses?: boolean | undefined;
    /**
     * Display or hide IP addresses in Log Drains.
     */
    hideIpAddressesInLogDrains?: boolean | undefined;
};
export type PatchTeamRequest = {
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId: string;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
    requestBody: PatchTeamRequestBody;
};
/** @internal */
export declare const PatchTeamRoles2$inboundSchema: z.ZodType<PatchTeamRoles2, z.ZodTypeDef, unknown>;
/** @internal */
export type PatchTeamRoles2$Outbound = {
    accessGroupId: string;
};
/** @internal */
export declare const PatchTeamRoles2$outboundSchema: z.ZodType<PatchTeamRoles2$Outbound, z.ZodTypeDef, PatchTeamRoles2>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PatchTeamRoles2$ {
    /** @deprecated use `PatchTeamRoles2$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PatchTeamRoles2, z.ZodTypeDef, unknown>;
    /** @deprecated use `PatchTeamRoles2$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PatchTeamRoles2$Outbound, z.ZodTypeDef, PatchTeamRoles2>;
    /** @deprecated use `PatchTeamRoles2$Outbound` instead. */
    type Outbound = PatchTeamRoles2$Outbound;
}
export declare function patchTeamRoles2ToJSON(patchTeamRoles2: PatchTeamRoles2): string;
export declare function patchTeamRoles2FromJSON(jsonString: string): SafeParseResult<PatchTeamRoles2, SDKValidationError>;
/** @internal */
export declare const PatchTeamRoles1$inboundSchema: z.ZodNativeEnum<typeof PatchTeamRoles1>;
/** @internal */
export declare const PatchTeamRoles1$outboundSchema: z.ZodNativeEnum<typeof PatchTeamRoles1>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PatchTeamRoles1$ {
    /** @deprecated use `PatchTeamRoles1$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Owner: "OWNER";
        readonly Member: "MEMBER";
        readonly Developer: "DEVELOPER";
        readonly Security: "SECURITY";
        readonly Billing: "BILLING";
        readonly Viewer: "VIEWER";
        readonly Contributor: "CONTRIBUTOR";
    }>;
    /** @deprecated use `PatchTeamRoles1$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Owner: "OWNER";
        readonly Member: "MEMBER";
        readonly Developer: "DEVELOPER";
        readonly Security: "SECURITY";
        readonly Billing: "BILLING";
        readonly Viewer: "VIEWER";
        readonly Contributor: "CONTRIBUTOR";
    }>;
}
/** @internal */
export declare const PatchTeamRoles$inboundSchema: z.ZodType<PatchTeamRoles, z.ZodTypeDef, unknown>;
/** @internal */
export type PatchTeamRoles$Outbound = PatchTeamRoles2$Outbound | string;
/** @internal */
export declare const PatchTeamRoles$outboundSchema: z.ZodType<PatchTeamRoles$Outbound, z.ZodTypeDef, PatchTeamRoles>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PatchTeamRoles$ {
    /** @deprecated use `PatchTeamRoles$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PatchTeamRoles, z.ZodTypeDef, unknown>;
    /** @deprecated use `PatchTeamRoles$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PatchTeamRoles$Outbound, z.ZodTypeDef, PatchTeamRoles>;
    /** @deprecated use `PatchTeamRoles$Outbound` instead. */
    type Outbound = PatchTeamRoles$Outbound;
}
export declare function patchTeamRolesToJSON(patchTeamRoles: PatchTeamRoles): string;
export declare function patchTeamRolesFromJSON(jsonString: string): SafeParseResult<PatchTeamRoles, SDKValidationError>;
/** @internal */
export declare const PatchTeamSaml$inboundSchema: z.ZodType<PatchTeamSaml, z.ZodTypeDef, unknown>;
/** @internal */
export type PatchTeamSaml$Outbound = {
    enforced?: boolean | undefined;
    roles?: {
        [k: string]: PatchTeamRoles2$Outbound | string;
    } | undefined;
};
/** @internal */
export declare const PatchTeamSaml$outboundSchema: z.ZodType<PatchTeamSaml$Outbound, z.ZodTypeDef, PatchTeamSaml>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PatchTeamSaml$ {
    /** @deprecated use `PatchTeamSaml$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PatchTeamSaml, z.ZodTypeDef, unknown>;
    /** @deprecated use `PatchTeamSaml$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PatchTeamSaml$Outbound, z.ZodTypeDef, PatchTeamSaml>;
    /** @deprecated use `PatchTeamSaml$Outbound` instead. */
    type Outbound = PatchTeamSaml$Outbound;
}
export declare function patchTeamSamlToJSON(patchTeamSaml: PatchTeamSaml): string;
export declare function patchTeamSamlFromJSON(jsonString: string): SafeParseResult<PatchTeamSaml, SDKValidationError>;
/** @internal */
export declare const PatchTeamRemoteCaching$inboundSchema: z.ZodType<PatchTeamRemoteCaching, z.ZodTypeDef, unknown>;
/** @internal */
export type PatchTeamRemoteCaching$Outbound = {
    enabled?: boolean | undefined;
};
/** @internal */
export declare const PatchTeamRemoteCaching$outboundSchema: z.ZodType<PatchTeamRemoteCaching$Outbound, z.ZodTypeDef, PatchTeamRemoteCaching>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PatchTeamRemoteCaching$ {
    /** @deprecated use `PatchTeamRemoteCaching$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PatchTeamRemoteCaching, z.ZodTypeDef, unknown>;
    /** @deprecated use `PatchTeamRemoteCaching$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PatchTeamRemoteCaching$Outbound, z.ZodTypeDef, PatchTeamRemoteCaching>;
    /** @deprecated use `PatchTeamRemoteCaching$Outbound` instead. */
    type Outbound = PatchTeamRemoteCaching$Outbound;
}
export declare function patchTeamRemoteCachingToJSON(patchTeamRemoteCaching: PatchTeamRemoteCaching): string;
export declare function patchTeamRemoteCachingFromJSON(jsonString: string): SafeParseResult<PatchTeamRemoteCaching, SDKValidationError>;
/** @internal */
export declare const PatchTeamRequestBody$inboundSchema: z.ZodType<PatchTeamRequestBody, z.ZodTypeDef, unknown>;
/** @internal */
export type PatchTeamRequestBody$Outbound = {
    avatar?: string | undefined;
    description?: string | undefined;
    emailDomain?: string | null | undefined;
    name?: string | undefined;
    previewDeploymentSuffix?: string | null | undefined;
    regenerateInviteCode?: boolean | undefined;
    saml?: PatchTeamSaml$Outbound | undefined;
    slug?: string | undefined;
    enablePreviewFeedback?: string | undefined;
    enableProductionFeedback?: string | undefined;
    sensitiveEnvironmentVariablePolicy?: string | undefined;
    remoteCaching?: PatchTeamRemoteCaching$Outbound | undefined;
    hideIpAddresses?: boolean | undefined;
    hideIpAddressesInLogDrains?: boolean | undefined;
};
/** @internal */
export declare const PatchTeamRequestBody$outboundSchema: z.ZodType<PatchTeamRequestBody$Outbound, z.ZodTypeDef, PatchTeamRequestBody>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PatchTeamRequestBody$ {
    /** @deprecated use `PatchTeamRequestBody$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PatchTeamRequestBody, z.ZodTypeDef, unknown>;
    /** @deprecated use `PatchTeamRequestBody$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PatchTeamRequestBody$Outbound, z.ZodTypeDef, PatchTeamRequestBody>;
    /** @deprecated use `PatchTeamRequestBody$Outbound` instead. */
    type Outbound = PatchTeamRequestBody$Outbound;
}
export declare function patchTeamRequestBodyToJSON(patchTeamRequestBody: PatchTeamRequestBody): string;
export declare function patchTeamRequestBodyFromJSON(jsonString: string): SafeParseResult<PatchTeamRequestBody, SDKValidationError>;
/** @internal */
export declare const PatchTeamRequest$inboundSchema: z.ZodType<PatchTeamRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type PatchTeamRequest$Outbound = {
    teamId: string;
    slug?: string | undefined;
    RequestBody: PatchTeamRequestBody$Outbound;
};
/** @internal */
export declare const PatchTeamRequest$outboundSchema: z.ZodType<PatchTeamRequest$Outbound, z.ZodTypeDef, PatchTeamRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PatchTeamRequest$ {
    /** @deprecated use `PatchTeamRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<PatchTeamRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `PatchTeamRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<PatchTeamRequest$Outbound, z.ZodTypeDef, PatchTeamRequest>;
    /** @deprecated use `PatchTeamRequest$Outbound` instead. */
    type Outbound = PatchTeamRequest$Outbound;
}
export declare function patchTeamRequestToJSON(patchTeamRequest: PatchTeamRequest): string;
export declare function patchTeamRequestFromJSON(jsonString: string): SafeParseResult<PatchTeamRequest, SDKValidationError>;
//# sourceMappingURL=patchteamop.d.ts.map