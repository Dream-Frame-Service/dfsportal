{"version":3,"file":"Dashboard-CrWdrh8m.js","sources":["../../src/pages/Dashboard.tsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { supabase } from '@/lib/supabase';\nimport { DollarSign, Package, ShoppingCart, Users, TrendingUp, TrendingDown, AlertTriangle, CheckCircle, RefreshCw } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { useToast } from '@/hooks/use-toast';\nimport { Button } from '@/components/ui/button';\nimport { useNavigate } from 'react-router-dom';\n\n// Add formatCurrency function\nexport function formatCurrency(amount: number): string {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD'\n  }).format(amount);\n}\n\ninterface DebugInfo {\n  supabaseUrl: string;\n  hasAnonKey: boolean;\n  authStatus: string;\n  networkRequests: Array<{\n    type: string;\n    success: boolean;\n    timestamp: string;\n    error?: any;\n  }>;\n  rlsError: string | null;\n}\n\nconst Dashboard = () => {\n  const [user, setUser] = useState<any>(null);\n  const [profile, setProfile] = useState<any>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [debugInfo, setDebugInfo] = useState<DebugInfo>({\n    supabaseUrl: '',\n    hasAnonKey: false,\n    authStatus: 'checking',\n    networkRequests: [],\n    rlsError: null\n  });\n  const navigate = useNavigate();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    // Check Supabase configuration\n    const checkSupabaseConfig = () => {\n      const url = import.meta.env.VITE_SUPABASE_URL;\n      const anonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;\n      \n      console.log('🔧 Supabase Configuration Check:');\n      console.log('URL:', url ? `${url.substring(0, 30)}...` : 'NOT SET');\n      console.log('Anon Key:', anonKey ? 'SET' : 'NOT SET');\n      \n      setDebugInfo(prev => ({\n        ...prev,\n        supabaseUrl: url || 'NOT SET',\n        hasAnonKey: !!anonKey\n      }));\n\n      if (!url || !anonKey) {\n        setError('Supabase environment variables are not properly configured');\n        setLoading(false);\n        return false;\n      }\n      return true;\n    };\n\n    // Check authentication and fetch data\n    const fetchDashboardData = async () => {\n      try {\n        setLoading(true);\n        \n        // Check config first\n        if (!checkSupabaseConfig()) {\n          return;\n        }\n\n        // Get current session\n        console.log('🔐 Checking authentication...');\n        const { data: { session }, error: sessionError } = await supabase.auth.getSession();\n        \n        if (sessionError) {\n          console.error('❌ Session error:', sessionError);\n          throw sessionError;\n        }\n\n        console.log('📊 Session status:', session ? 'Active' : 'No session');\n        \n        // Get current user\n        const { data: { user }, error: userError } = await supabase.auth.getUser();\n        \n        setDebugInfo(prev => ({\n          ...prev,\n          authStatus: user ? 'authenticated' : 'not authenticated',\n          networkRequests: [...prev.networkRequests, {\n            type: 'auth.getUser',\n            success: !userError,\n            timestamp: new Date().toISOString()\n          }]\n        }));\n\n        if (userError) {\n          console.error('❌ Error fetching user:', userError);\n          throw userError;\n        }\n\n        if (!user) {\n          console.log('🚪 No user found, redirecting to login');\n          navigate('/login');\n          return;\n        }\n\n        console.log('✅ User authenticated:', user.id);\n        setUser(user);\n\n        // Test RLS by fetching profile\n        console.log('📝 Fetching user profile...');\n        const { data: profileData, error: profileError } = await supabase\n          .from('profiles')\n          .select('*')\n          .eq('id', user.id)\n          .single();\n\n        setDebugInfo(prev => ({\n          ...prev,\n          networkRequests: [...prev.networkRequests, {\n            type: 'profiles.select',\n            success: !profileError,\n            error: profileError?.message,\n            timestamp: new Date().toISOString()\n          }]\n        }));\n\n        if (profileError) {\n          console.error('❌ Error fetching profile:', profileError);\n          \n          // Check for RLS error\n          if (profileError.message?.includes('policy')) {\n            setDebugInfo(prev => ({\n              ...prev,\n              rlsError: 'Row Level Security (RLS) policy may be blocking access to profiles table'\n            }));\n          }\n          \n          // If profile doesn't exist, create one\n          if (profileError.code === 'PGRST116') {\n            console.log('📝 Profile not found, creating new profile...');\n            const { data: newProfile, error: createError } = await supabase\n              .from('profiles')\n              .insert([\n                {\n                  id: user.id,\n                  email: user.email,\n                  updated_at: new Date().toISOString()\n                }\n              ])\n              .select()\n              .single();\n\n            setDebugInfo(prev => ({\n              ...prev,\n              networkRequests: [...prev.networkRequests, {\n                type: 'profiles.insert',\n                success: !createError,\n                error: createError?.message,\n                timestamp: new Date().toISOString()\n              }]\n            }));\n\n            if (createError) {\n              console.error('❌ Error creating profile:', createError);\n              if (createError.message?.includes('policy')) {\n                setDebugInfo(prev => ({\n                  ...prev,\n                  rlsError: 'RLS policy is blocking profile creation. Check INSERT policy for profiles table.'\n                }));\n              }\n              throw createError;\n            }\n            setProfile(newProfile);\n            console.log('✅ Profile created successfully');\n          } else {\n            throw profileError;\n          }\n        } else {\n          setProfile(profileData);\n          console.log('✅ Profile fetched successfully');\n        }\n\n        // Test other table access\n        console.log('🧪 Testing access to other tables...');\n        const tables = ['chats', 'messages', 'wisdom'];\n        for (const table of tables) {\n          try {\n            const { error: tableError } = await supabase\n              .from(table)\n              .select('id')\n              .limit(1);\n            \n            setDebugInfo(prev => ({\n              ...prev,\n              networkRequests: [...prev.networkRequests, {\n                type: `${table}.select`,\n                success: !tableError,\n                error: tableError?.message,\n                timestamp: new Date().toISOString()\n              }]\n            }));\n\n            if (tableError?.message?.includes('policy')) {\n              console.warn(`⚠️ RLS issue with ${table} table:`, tableError.message);\n            }\n          } catch (err) {\n            console.error(`❌ Error testing ${table} table:`, err);\n          }\n        }\n\n      } catch (err) {\n        console.error('❌ Dashboard data fetch error:', err);\n        setError(err instanceof Error ? err.message : 'An error occurred');\n        toast({\n          title: \"Error\",\n          description: \"Failed to load dashboard data. Check console for details.\",\n          variant: \"destructive\",\n        });\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    // Set up auth state listener\n    const { data: { subscription } } = supabase.auth.onAuthStateChange(\n      async (event, session) => {\n        console.log('🔄 Auth state changed:', event, session?.user?.id);\n        if (event === 'SIGNED_IN' || event === 'TOKEN_REFRESHED') {\n          await fetchDashboardData();\n        } else if (event === 'SIGNED_OUT') {\n          navigate('/login');\n        }\n      }\n    );\n\n    // Initial fetch\n    fetchDashboardData();\n\n    // Cleanup subscription\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [navigate, toast]);\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-gray-900 mx-auto\"></div>\n          <p className=\"mt-4\">Loading dashboard...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center max-w-2xl mx-auto p-8\">\n          <h2 className=\"text-2xl font-bold text-red-600 mb-4\">Dashboard Error</h2>\n          <p className=\"text-red-500 mb-4\">Error: {error}</p>\n          \n          {/* Debug information for error state */}\n          <div className=\"bg-gray-100 p-4 rounded text-left mb-4\">\n            <h3 className=\"font-semibold mb-2\">Debug Information:</h3>\n            <div className=\"space-y-2 text-sm\">\n              <p><strong>Supabase URL:</strong> {debugInfo.supabaseUrl}</p>\n              <p><strong>Anon Key:</strong> {debugInfo.hasAnonKey ? 'Present' : 'Missing'}</p>\n              <p><strong>Auth Status:</strong> {debugInfo.authStatus}</p>\n              {debugInfo.rlsError && (\n                <p className=\"text-red-600\"><strong>RLS Error:</strong> {debugInfo.rlsError}</p>\n              )}\n            </div>\n          </div>\n\n          <button \n            onClick={() => window.location.reload()} \n            className=\"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\"\n          >\n            Refresh Page\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-4\">\n      <h1 className=\"text-2xl font-bold mb-4\">Dashboard</h1>\n      \n      {/* Enhanced debug information */}\n      <div className=\"bg-gray-100 p-4 rounded mb-4\">\n        <h2 className=\"font-semibold mb-2\">Debug Info:</h2>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div>\n            <h3 className=\"font-medium\">User Info:</h3>\n            <p className=\"text-sm\">User ID: {user?.id}</p>\n            <p className=\"text-sm\">Email: {user?.email}</p>\n            <p className=\"text-sm\">Auth Status: {debugInfo.authStatus}</p>\n          </div>\n          <div>\n            <h3 className=\"font-medium\">Supabase Config:</h3>\n            <p className=\"text-sm\">URL: {debugInfo.supabaseUrl?.substring(0, 30)}...</p>\n            <p className=\"text-sm\">Anon Key: {debugInfo.hasAnonKey ? '✅ Set' : '❌ Missing'}</p>\n          </div>\n        </div>\n        \n        <div className=\"mt-4\">\n          <h3 className=\"font-medium\">Profile Data:</h3>\n          <pre className=\"text-xs bg-white p-2 rounded overflow-auto\">\n            {JSON.stringify(profile, null, 2)}\n          </pre>\n        </div>\n\n        <div className=\"mt-4\">\n          <h3 className=\"font-medium\">Network Requests:</h3>\n          <div className=\"space-y-1 text-xs\">\n            {debugInfo.networkRequests.map((req, i) => (\n              <div key={i} className={`p-1 ${req.success ? 'bg-green-100' : 'bg-red-100'}`}>\n                {req.timestamp}: {req.type} - {req.success ? '✅ Success' : `❌ Failed: ${req.error}`}\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {debugInfo.rlsError && (\n          <div className=\"mt-4 p-3 bg-red-100 border border-red-300 rounded\">\n            <p className=\"text-red-700 font-medium\">⚠️ RLS Policy Issue Detected:</p>\n            <p className=\"text-red-600 text-sm\">{debugInfo.rlsError}</p>\n          </div>\n        )}\n      </div>\n\n      {/* Your dashboard content here */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        {/* Add your dashboard widgets/components */}\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard;"],"names":["useState","useEffect","user","_a","jsxs","jsx"],"mappings":"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"}