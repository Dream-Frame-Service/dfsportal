/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
export const PatchTeamRoles1 = {
    Owner: "OWNER",
    Member: "MEMBER",
    Developer: "DEVELOPER",
    Security: "SECURITY",
    Billing: "BILLING",
    Viewer: "VIEWER",
    Contributor: "CONTRIBUTOR",
};
/** @internal */
export const PatchTeamRoles2$inboundSchema = z.object({
    accessGroupId: z.string(),
});
/** @internal */
export const PatchTeamRoles2$outboundSchema = z.object({
    accessGroupId: z.string(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PatchTeamRoles2$;
(function (PatchTeamRoles2$) {
    /** @deprecated use `PatchTeamRoles2$inboundSchema` instead. */
    PatchTeamRoles2$.inboundSchema = PatchTeamRoles2$inboundSchema;
    /** @deprecated use `PatchTeamRoles2$outboundSchema` instead. */
    PatchTeamRoles2$.outboundSchema = PatchTeamRoles2$outboundSchema;
})(PatchTeamRoles2$ || (PatchTeamRoles2$ = {}));
export function patchTeamRoles2ToJSON(patchTeamRoles2) {
    return JSON.stringify(PatchTeamRoles2$outboundSchema.parse(patchTeamRoles2));
}
export function patchTeamRoles2FromJSON(jsonString) {
    return safeParse(jsonString, (x) => PatchTeamRoles2$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PatchTeamRoles2' from JSON`);
}
/** @internal */
export const PatchTeamRoles1$inboundSchema = z.nativeEnum(PatchTeamRoles1);
/** @internal */
export const PatchTeamRoles1$outboundSchema = PatchTeamRoles1$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PatchTeamRoles1$;
(function (PatchTeamRoles1$) {
    /** @deprecated use `PatchTeamRoles1$inboundSchema` instead. */
    PatchTeamRoles1$.inboundSchema = PatchTeamRoles1$inboundSchema;
    /** @deprecated use `PatchTeamRoles1$outboundSchema` instead. */
    PatchTeamRoles1$.outboundSchema = PatchTeamRoles1$outboundSchema;
})(PatchTeamRoles1$ || (PatchTeamRoles1$ = {}));
/** @internal */
export const PatchTeamRoles$inboundSchema = z.union([
    z.lazy(() => PatchTeamRoles2$inboundSchema),
    PatchTeamRoles1$inboundSchema,
]);
/** @internal */
export const PatchTeamRoles$outboundSchema = z.union([
    z.lazy(() => PatchTeamRoles2$outboundSchema),
    PatchTeamRoles1$outboundSchema,
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PatchTeamRoles$;
(function (PatchTeamRoles$) {
    /** @deprecated use `PatchTeamRoles$inboundSchema` instead. */
    PatchTeamRoles$.inboundSchema = PatchTeamRoles$inboundSchema;
    /** @deprecated use `PatchTeamRoles$outboundSchema` instead. */
    PatchTeamRoles$.outboundSchema = PatchTeamRoles$outboundSchema;
})(PatchTeamRoles$ || (PatchTeamRoles$ = {}));
export function patchTeamRolesToJSON(patchTeamRoles) {
    return JSON.stringify(PatchTeamRoles$outboundSchema.parse(patchTeamRoles));
}
export function patchTeamRolesFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PatchTeamRoles$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PatchTeamRoles' from JSON`);
}
/** @internal */
export const PatchTeamSaml$inboundSchema = z.object({
    enforced: z.boolean().optional(),
    roles: z.record(z.union([
        z.lazy(() => PatchTeamRoles2$inboundSchema),
        PatchTeamRoles1$inboundSchema,
    ])).optional(),
});
/** @internal */
export const PatchTeamSaml$outboundSchema = z.object({
    enforced: z.boolean().optional(),
    roles: z.record(z.union([
        z.lazy(() => PatchTeamRoles2$outboundSchema),
        PatchTeamRoles1$outboundSchema,
    ])).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PatchTeamSaml$;
(function (PatchTeamSaml$) {
    /** @deprecated use `PatchTeamSaml$inboundSchema` instead. */
    PatchTeamSaml$.inboundSchema = PatchTeamSaml$inboundSchema;
    /** @deprecated use `PatchTeamSaml$outboundSchema` instead. */
    PatchTeamSaml$.outboundSchema = PatchTeamSaml$outboundSchema;
})(PatchTeamSaml$ || (PatchTeamSaml$ = {}));
export function patchTeamSamlToJSON(patchTeamSaml) {
    return JSON.stringify(PatchTeamSaml$outboundSchema.parse(patchTeamSaml));
}
export function patchTeamSamlFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PatchTeamSaml$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PatchTeamSaml' from JSON`);
}
/** @internal */
export const PatchTeamRemoteCaching$inboundSchema = z.object({
    enabled: z.boolean().optional(),
});
/** @internal */
export const PatchTeamRemoteCaching$outboundSchema = z.object({
    enabled: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PatchTeamRemoteCaching$;
(function (PatchTeamRemoteCaching$) {
    /** @deprecated use `PatchTeamRemoteCaching$inboundSchema` instead. */
    PatchTeamRemoteCaching$.inboundSchema = PatchTeamRemoteCaching$inboundSchema;
    /** @deprecated use `PatchTeamRemoteCaching$outboundSchema` instead. */
    PatchTeamRemoteCaching$.outboundSchema = PatchTeamRemoteCaching$outboundSchema;
})(PatchTeamRemoteCaching$ || (PatchTeamRemoteCaching$ = {}));
export function patchTeamRemoteCachingToJSON(patchTeamRemoteCaching) {
    return JSON.stringify(PatchTeamRemoteCaching$outboundSchema.parse(patchTeamRemoteCaching));
}
export function patchTeamRemoteCachingFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PatchTeamRemoteCaching$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PatchTeamRemoteCaching' from JSON`);
}
/** @internal */
export const PatchTeamRequestBody$inboundSchema = z.object({
    avatar: z.string().optional(),
    description: z.string().optional(),
    emailDomain: z.nullable(z.string()).optional(),
    name: z.string().optional(),
    previewDeploymentSuffix: z.nullable(z.string()).optional(),
    regenerateInviteCode: z.boolean().optional(),
    saml: z.lazy(() => PatchTeamSaml$inboundSchema).optional(),
    slug: z.string().optional(),
    enablePreviewFeedback: z.string().optional(),
    enableProductionFeedback: z.string().optional(),
    sensitiveEnvironmentVariablePolicy: z.string().optional(),
    remoteCaching: z.lazy(() => PatchTeamRemoteCaching$inboundSchema).optional(),
    hideIpAddresses: z.boolean().optional(),
    hideIpAddressesInLogDrains: z.boolean().optional(),
});
/** @internal */
export const PatchTeamRequestBody$outboundSchema = z.object({
    avatar: z.string().optional(),
    description: z.string().optional(),
    emailDomain: z.nullable(z.string()).optional(),
    name: z.string().optional(),
    previewDeploymentSuffix: z.nullable(z.string()).optional(),
    regenerateInviteCode: z.boolean().optional(),
    saml: z.lazy(() => PatchTeamSaml$outboundSchema).optional(),
    slug: z.string().optional(),
    enablePreviewFeedback: z.string().optional(),
    enableProductionFeedback: z.string().optional(),
    sensitiveEnvironmentVariablePolicy: z.string().optional(),
    remoteCaching: z.lazy(() => PatchTeamRemoteCaching$outboundSchema).optional(),
    hideIpAddresses: z.boolean().optional(),
    hideIpAddressesInLogDrains: z.boolean().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PatchTeamRequestBody$;
(function (PatchTeamRequestBody$) {
    /** @deprecated use `PatchTeamRequestBody$inboundSchema` instead. */
    PatchTeamRequestBody$.inboundSchema = PatchTeamRequestBody$inboundSchema;
    /** @deprecated use `PatchTeamRequestBody$outboundSchema` instead. */
    PatchTeamRequestBody$.outboundSchema = PatchTeamRequestBody$outboundSchema;
})(PatchTeamRequestBody$ || (PatchTeamRequestBody$ = {}));
export function patchTeamRequestBodyToJSON(patchTeamRequestBody) {
    return JSON.stringify(PatchTeamRequestBody$outboundSchema.parse(patchTeamRequestBody));
}
export function patchTeamRequestBodyFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PatchTeamRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PatchTeamRequestBody' from JSON`);
}
/** @internal */
export const PatchTeamRequest$inboundSchema = z.object({
    teamId: z.string(),
    slug: z.string().optional(),
    RequestBody: z.lazy(() => PatchTeamRequestBody$inboundSchema),
}).transform((v) => {
    return remap$(v, {
        "RequestBody": "requestBody",
    });
});
/** @internal */
export const PatchTeamRequest$outboundSchema = z.object({
    teamId: z.string(),
    slug: z.string().optional(),
    requestBody: z.lazy(() => PatchTeamRequestBody$outboundSchema),
}).transform((v) => {
    return remap$(v, {
        requestBody: "RequestBody",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PatchTeamRequest$;
(function (PatchTeamRequest$) {
    /** @deprecated use `PatchTeamRequest$inboundSchema` instead. */
    PatchTeamRequest$.inboundSchema = PatchTeamRequest$inboundSchema;
    /** @deprecated use `PatchTeamRequest$outboundSchema` instead. */
    PatchTeamRequest$.outboundSchema = PatchTeamRequest$outboundSchema;
})(PatchTeamRequest$ || (PatchTeamRequest$ = {}));
export function patchTeamRequestToJSON(patchTeamRequest) {
    return JSON.stringify(PatchTeamRequest$outboundSchema.parse(patchTeamRequest));
}
export function patchTeamRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PatchTeamRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PatchTeamRequest' from JSON`);
}
//# sourceMappingURL=patchteamop.js.map