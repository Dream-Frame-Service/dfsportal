var q=Object.defineProperty;var H=(l,s,t)=>s in l?q(l,s,{enumerable:!0,configurable:!0,writable:!0,value:t}):l[s]=t;var A=(l,s,t)=>H(l,typeof s!="symbol"?s+"":s,t);import{r as S,j as e}from"./react-vendor-BIZaP1tt.js";import{u as V,B as C,A as Y,m as Z,C as E,d as k,e as R,f as M,g as L,l as U}from"./admin-core-B2SBlvpM.js";import{P,S as _,G as z,D as J,L as Q,g as W}from"./aws-sdk-n3W_cRwv.js";import"./vendor-DfVw5h9R.js";import{Y as B,ac as X,bs as ee,bT as se,ao as te}from"./ui-components-Ace1hSxE.js";import"./supabase-D_JhUDtQ.js";const G={endpoint:"https://vetufvhzmawjbsumtplq.supabase.co/storage/v1/s3",region:"us-east-1",credentials:{accessKeyId:"25c2ac3c18cd1c6dcc3d0e3ee5e72315",secretAccessKey:"141113786127df9081860447503c52bed4bed4a066d49bc079118faabf2d10af"},forcePathStyle:!0,signatureVersion:"v4"},v=new _(G),le="dfs-manager-files";class ae{constructor(s=le){A(this,"bucket");this.bucket=s}async uploadFile(s,t,a){try{const r=new P({Bucket:this.bucket,Key:s,Body:t,ContentType:(a==null?void 0:a.contentType)||(t instanceof File?t.type:"application/octet-stream"),Metadata:a==null?void 0:a.metadata}),o=await v.send(r);return{success:!0,data:{key:s,etag:o.ETag,bucket:this.bucket,url:`${G.endpoint}/${this.bucket}/${s}`},error:null}}catch(r){return console.error("S3 Upload Error:",r),{success:!1,data:null,error:r instanceof Error?r.message:"Upload failed"}}}async downloadFile(s){try{const t=new z({Bucket:this.bucket,Key:s}),a=await v.send(t);return{success:!0,data:{body:a.Body,contentType:a.ContentType,contentLength:a.ContentLength,lastModified:a.LastModified,metadata:a.Metadata},error:null}}catch(t){return console.error("S3 Download Error:",t),{success:!1,data:null,error:t instanceof Error?t.message:"Download failed"}}}async deleteFile(s){try{const t=new J({Bucket:this.bucket,Key:s});return await v.send(t),{success:!0,data:{key:s},error:null}}catch(t){return console.error("S3 Delete Error:",t),{success:!1,data:null,error:t instanceof Error?t.message:"Delete failed"}}}async listFiles(s,t=1e3){try{const a=new Q({Bucket:this.bucket,Prefix:s,MaxKeys:t}),r=await v.send(a);return{success:!0,data:{files:r.Contents||[],isTruncated:r.IsTruncated,continuationToken:r.NextContinuationToken},error:null}}catch(a){return console.error("S3 List Error:",a),{success:!1,data:null,error:a instanceof Error?a.message:"List failed"}}}async getSignedUrl(s,t="GET",a=3600){try{const r=t==="GET"?new z({Bucket:this.bucket,Key:s}):new P({Bucket:this.bucket,Key:s});return{success:!0,data:{url:await W(v,r,{expiresIn:a}),expiresIn:a},error:null}}catch(r){return console.error("S3 Signed URL Error:",r),{success:!1,data:null,error:r instanceof Error?r.message:"Signed URL generation failed"}}}async uploadFiles(s){const t=await Promise.allSettled(s.map(({key:o,file:i,metadata:m})=>this.uploadFile(o,i,{contentType:i instanceof File?i.type:void 0,metadata:m}))),a=t.map((o,i)=>({result:o,index:i})).filter(({result:o})=>o.status==="fulfilled"&&o.value.success).map(({result:o,index:i})=>({key:s[i].key,data:o.value.data})),r=t.map((o,i)=>({result:o,index:i})).filter(({result:o})=>o.status==="rejected"||!o.value.success).map(({result:o,index:i})=>({key:s[i].key,error:o.status==="rejected"?o.reason:o.value.error}));return{successful:a,failed:r,total:s.length}}}const h=new ae,O=(l,s,t)=>h.uploadFile(l,s,{contentType:s.type,metadata:t}),oe=l=>h.downloadFile(l),I=(l,s="GET",t=3600)=>h.getSignedUrl(l,s,t);async function ne(){var t,a,r,o,i,m,y;console.log("🧪 Testing S3 Protocol Connection to Supabase Storage...");const l={connection:!1,upload:!1,download:!1,list:!1,signedUrl:!1,cleanup:!1};try{console.log(`
1️⃣ Testing S3 connection...`);const g=await h.listFiles("",10);if(g.success)console.log("✅ S3 connection successful"),console.log(`📁 Found ${((a=(t=g.data)==null?void 0:t.files)==null?void 0:a.length)||0} files in bucket`),l.connection=!0,l.list=!0;else return console.log("❌ S3 connection failed:",g.error),l;console.log(`
2️⃣ Testing file upload...`);const u=new Blob(["Hello from S3 protocol test!"],{type:"text/plain"}),p=`test-files/s3-test-${Date.now()}.txt`,j=await O(p,new File([u],"test.txt",{type:"text/plain"}),{"test-type":"s3-protocol-test",timestamp:new Date().toISOString()});j.success?(console.log("✅ File upload successful"),console.log(`📤 Uploaded: ${p}`),console.log(`🔗 URL: ${(r=j.data)==null?void 0:r.url}`),l.upload=!0):console.log("❌ File upload failed:",j.error),console.log(`
3️⃣ Testing signed URL generation...`);const w=await I(p,"GET",300);w.success?(console.log("✅ Signed URL generation successful"),console.log(`🔐 Signed URL: ${(i=(o=w.data)==null?void 0:o.url)==null?void 0:i.substring(0,100)}...`),l.signedUrl=!0):console.log("❌ Signed URL generation failed:",w.error),console.log(`
4️⃣ Testing file download...`);const x=await oe(p);x.success?(console.log("✅ File download successful"),console.log(`📥 Content-Type: ${(m=x.data)==null?void 0:m.contentType}`),console.log(`📦 Content-Length: ${(y=x.data)==null?void 0:y.contentLength} bytes`),l.download=!0):console.log("❌ File download failed:",x.error),console.log(`
5️⃣ Cleaning up test file...`);const F=await h.deleteFile(p);F.success?(console.log("✅ Test file deleted successfully"),l.cleanup=!0):console.log("❌ Test file deletion failed:",F.error)}catch(g){console.error("❌ S3 Test Error:",g)}console.log(`
📊 S3 Protocol Test Results:`),console.log(`🔌 Connection: ${l.connection?"✅":"❌"}`),console.log(`📋 List Files: ${l.list?"✅":"❌"}`),console.log(`📤 Upload: ${l.upload?"✅":"❌"}`),console.log(`📥 Download: ${l.download?"✅":"❌"}`),console.log(`🔐 Signed URL: ${l.signedUrl?"✅":"❌"}`),console.log(`🧹 Cleanup: ${l.cleanup?"✅":"❌"}`);const s=Object.values(l).every(g=>g===!0);return console.log(`
${s?"🎉 All S3 tests passed!":"⚠️ Some S3 tests failed"}`),l}async function re(){console.log(`
🔄 Testing S3 Batch Upload...`);const l=[{key:`batch-test/file1-${Date.now()}.txt`,file:new File([new Blob(["Test file 1"])],"file1.txt",{type:"text/plain"}),metadata:{type:"batch-test",index:"1"}},{key:`batch-test/file2-${Date.now()}.txt`,file:new File([new Blob(["Test file 2"])],"file2.txt",{type:"text/plain"}),metadata:{type:"batch-test",index:"2"}},{key:`batch-test/file3-${Date.now()}.txt`,file:new File([new Blob(["Test file 3"])],"file3.txt",{type:"text/plain"}),metadata:{type:"batch-test",index:"3"}}],s=await h.uploadFiles(l);console.log("📊 Batch Upload Results:"),console.log(`✅ Successful: ${s.successful.length}/${s.total}`),console.log(`❌ Failed: ${s.failed.length}/${s.total}`),s.successful.length>0&&(console.log("📤 Successfully uploaded:"),s.successful.forEach(({key:t})=>console.log(`  - ${t}`))),s.failed.length>0&&(console.log("❌ Failed uploads:"),s.failed.forEach(({key:t,error:a})=>console.log(`  - ${t}: ${a}`))),console.log(`
🧹 Cleaning up batch test files...`);for(const{key:t}of l)await h.deleteFile(t);return s}async function ce(){console.log("🚀 Running Complete S3 Protocol Test Suite...");const l=await ne(),s=await re();return{connection:l,batch:s}}function me(){const[l,s]=S.useState([]),[t,a]=S.useState(!1),[r,o]=S.useState(!1),[i,m]=S.useState(null),[y,g]=S.useState([]),{toast:u}=V(),p=async()=>{var n,c,f;try{const d=await h.listFiles("dfs-manager/");if(d.success)s(((n=d.data)==null?void 0:n.files)||[]),u({title:"Files Loaded",description:`Found ${((f=(c=d.data)==null?void 0:c.files)==null?void 0:f.length)||0} files`});else throw new Error(d.error||"Failed to load files")}catch(d){console.error("Error loading files:",d),u({title:"Error",description:"Failed to load files from storage",variant:"destructive"})}},j=async n=>{var f;const c=n.target.files;if(!(!c||c.length===0)){a(!0),g([]);try{const d=[];for(let b=0;b<c.length;b++){const T=c[b],K=`dfs-manager/${Date.now()}-${T.name}`,$=await O(K,T,{"original-name":T.name,"upload-timestamp":new Date().toISOString(),"file-size":T.size.toString()});d.push({key:K,url:(f=$.data)==null?void 0:f.url,error:$.error||void 0,success:$.success})}g(d);const D=d.filter(b=>b.success).length,N=d.length-D;u({title:"Upload Complete",description:`${D} files uploaded successfully${N>0?`, ${N} failed`:""}`,variant:N>0?"destructive":"default"}),await p()}catch(d){console.error("Upload error:",d),u({title:"Upload Error",description:"Failed to upload files",variant:"destructive"})}finally{a(!1)}}},w=async n=>{var c;try{const f=await I(n,"GET",3600);if(f.success&&((c=f.data)!=null&&c.url))await navigator.clipboard.writeText(f.data.url),u({title:"Signed URL Generated",description:"URL copied to clipboard (valid for 1 hour)"});else throw new Error(f.error||"Failed to generate URL")}catch(f){console.error("Error generating signed URL:",f),u({title:"Error",description:"Failed to generate signed URL",variant:"destructive"})}},x=async n=>{try{const c=await h.deleteFile(n);if(c.success)u({title:"File Deleted",description:`File ${n} deleted successfully`}),await p();else throw new Error(c.error||"Failed to delete file")}catch(c){console.error("Error deleting file:",c),u({title:"Error",description:"Failed to delete file",variant:"destructive"})}},F=async()=>{o(!0);try{const n=await ce();m(n),u({title:"S3 Tests Complete",description:"Check console for detailed results"})}catch(n){console.error("Test error:",n),u({title:"Test Error",description:"Failed to run S3 tests",variant:"destructive"})}finally{o(!1)}};return e.jsxs("div",{className:"space-y-6",children:[e.jsxs("div",{className:"flex items-center justify-between",children:[e.jsxs("div",{children:[e.jsx("h2",{className:"text-2xl font-bold",children:"S3 Storage Manager"}),e.jsx("p",{className:"text-muted-foreground",children:"Manage files using S3 protocol with Supabase Storage"})]}),e.jsxs("div",{className:"flex gap-2",children:[e.jsxs(C,{onClick:F,disabled:r,variant:"outline",children:[e.jsx(B,{className:`w-4 h-4 mr-2 ${r?"animate-spin":""}`}),"Test S3"]}),e.jsxs(C,{onClick:p,variant:"outline",children:[e.jsx(B,{className:"w-4 h-4 mr-2"}),"Refresh"]})]})]}),e.jsxs(Y,{children:[e.jsx(X,{className:"h-4 w-4"}),e.jsxs(Z,{children:[e.jsx("strong",{children:"S3 Endpoint:"})," ","https://vetufvhzmawjbsumtplq.supabase.co/storage/v1/s3",e.jsx("br",{}),e.jsx("strong",{children:"Region:"})," ","us-east-1",e.jsx("br",{}),e.jsx("strong",{children:"Bucket:"})," ","dfs-manager-files"]})]}),e.jsxs(E,{children:[e.jsxs(k,{children:[e.jsxs(R,{className:"flex items-center gap-2",children:[e.jsx(ee,{className:"w-5 h-5"}),"Upload Files"]}),e.jsx(M,{children:"Upload files to Supabase Storage using S3 protocol"})]}),e.jsx(L,{children:e.jsxs("div",{className:"space-y-4",children:[e.jsx("input",{type:"file",multiple:!0,onChange:j,disabled:t,className:"block w-full text-sm text-slate-500 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"}),t&&e.jsxs("div",{className:"text-center",children:[e.jsx(B,{className:"w-6 h-6 animate-spin mx-auto mb-2"}),e.jsx("p",{children:"Uploading files..."})]}),y.length>0&&e.jsxs("div",{className:"space-y-2",children:[e.jsx("h4",{className:"font-semibold",children:"Upload Results:"}),y.map((n,c)=>e.jsxs("div",{className:"flex items-center justify-between p-2 bg-slate-50 rounded",children:[e.jsx("span",{className:"truncate",children:n.key}),e.jsx(U,{variant:n.success?"default":"destructive",children:n.success?"Success":"Failed"})]},c))]})]})})]}),e.jsxs(E,{children:[e.jsxs(k,{children:[e.jsx(R,{children:"Files in Storage"}),e.jsx(M,{children:"Files stored in S3-compatible Supabase Storage"})]}),e.jsx(L,{children:l.length===0?e.jsx("p",{className:"text-center text-muted-foreground py-8",children:"No files found. Upload some files to get started."}):e.jsx("div",{className:"space-y-2",children:l.map((n,c)=>e.jsxs("div",{className:"flex items-center justify-between p-3 border rounded-lg",children:[e.jsxs("div",{className:"flex-1",children:[e.jsx("p",{className:"font-medium truncate",children:n.Key}),e.jsxs("p",{className:"text-sm text-muted-foreground",children:[n.Size," bytes • ",new Date(n.LastModified).toLocaleDateString()]})]}),e.jsxs("div",{className:"flex gap-2",children:[e.jsx(C,{size:"sm",variant:"outline",onClick:()=>w(n.Key),children:e.jsx(se,{className:"w-4 h-4"})}),e.jsx(C,{size:"sm",variant:"outline",onClick:()=>x(n.Key),children:e.jsx(te,{className:"w-4 h-4"})})]})]},c))})})]}),i&&e.jsxs(E,{children:[e.jsx(k,{children:e.jsx(R,{children:"S3 Test Results"})}),e.jsx(L,{children:e.jsxs("div",{className:"grid grid-cols-2 gap-4",children:[e.jsxs("div",{children:[e.jsx("h4",{className:"font-semibold mb-2",children:"Connection Tests"}),e.jsx("div",{className:"space-y-1",children:Object.entries(i.connection).map(([n,c])=>e.jsxs("div",{className:"flex justify-between",children:[e.jsx("span",{className:"capitalize",children:n.replace(/([A-Z])/g," $1")}),e.jsx(U,{variant:c?"default":"destructive",children:c?"✅":"❌"})]},n))})]}),e.jsxs("div",{children:[e.jsx("h4",{className:"font-semibold mb-2",children:"Batch Upload"}),e.jsxs("div",{className:"space-y-1",children:[e.jsxs("div",{className:"flex justify-between",children:[e.jsx("span",{children:"Successful"}),e.jsx(U,{children:i.batch.successful.length})]}),e.jsxs("div",{className:"flex justify-between",children:[e.jsx("span",{children:"Failed"}),e.jsx(U,{variant:i.batch.failed.length>0?"destructive":"default",children:i.batch.failed.length})]})]})]})]})})]})]})}export{me as S3StorageManager};
