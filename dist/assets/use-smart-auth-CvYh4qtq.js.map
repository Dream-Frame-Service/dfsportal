{"version":3,"file":"use-smart-auth-CvYh4qtq.js","sources":["../../node_modules/lucide-react/dist/esm/icons/database.js","../../node_modules/lucide-react/dist/esm/icons/x-circle.js","../../src/contexts/DemoAuthContext.tsx","../../src/hooks/use-smart-auth.ts"],"sourcesContent":["/**\n * @license lucide-react v0.344.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Database = createLucideIcon(\"Database\", [\n  [\"ellipse\", { cx: \"12\", cy: \"5\", rx: \"9\", ry: \"3\", key: \"msslwz\" }],\n  [\"path\", { d: \"M3 5V19A9 3 0 0 0 21 19V5\", key: \"1wlel7\" }],\n  [\"path\", { d: \"M3 12A9 3 0 0 0 21 12\", key: \"mv7ke4\" }]\n]);\n\nexport { Database as default };\n//# sourceMappingURL=database.js.map\n","/**\n * @license lucide-react v0.344.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst XCircle = createLucideIcon(\"XCircle\", [\n  [\"circle\", { cx: \"12\", cy: \"12\", r: \"10\", key: \"1mglay\" }],\n  [\"path\", { d: \"m15 9-6 6\", key: \"1uzhvr\" }],\n  [\"path\", { d: \"m9 9 6 6\", key: \"z0biqf\" }]\n]);\n\nexport { XCircle as default };\n//# sourceMappingURL=x-circle.js.map\n","import React, { createContext, useContext, ReactNode } from 'react';\n\ninterface User {\n  ID: number;\n  Name: string;\n  Email: string;\n  CreateTime: string;\n}\n\ninterface UserProfile {\n  ID: number;\n  user_id: number;\n  role: 'Administrator' | 'Management' | 'Employee';\n  station: string;\n  employee_id: string;\n  phone: string;\n  hire_date: string;\n  is_active: boolean;\n}\n\ninterface DemoAuthContextType {\n  user: User;\n  userProfile: UserProfile;\n  isAdmin: boolean;\n  login: (email: string, password: string) => Promise<boolean>;\n  logout: () => Promise<void>;\n  register: (email: string, password: string) => Promise<boolean>;\n  loading: boolean;\n  hasPermission: (feature: string, action: 'read' | 'write') => boolean;\n  canEdit: (feature?: string) => boolean;\n  canDelete: (feature?: string) => boolean;\n  canCreate: (feature?: string) => boolean;\n  canViewLogs: (feature?: string) => boolean;\n  isVisualEditingEnabled: boolean;\n}\n\nconst DemoAuthContext = createContext<DemoAuthContextType | undefined>(undefined);\n\n// Export the context for use in smart auth hook\nexport { DemoAuthContext };\n\n// Demo user with full admin access for development review\nconst DEMO_USER: User = {\n  ID: 9999,\n  Name: 'Demo Administrator (Development Review)',\n  Email: 'demo@dfs-portal.com',\n  CreateTime: new Date().toISOString()\n};\n\nconst DEMO_PROFILE: UserProfile = {\n  ID: 9999,\n  user_id: 9999,\n  role: 'Administrator',\n  station: 'ALL_STATIONS',\n  employee_id: 'DEMO-DEV-001',\n  phone: '+1-555-DEV-DEMO',\n  hire_date: '2024-01-01',\n  is_active: true\n};\n\nexport const DemoAuthProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  // Log demo mode for development\n  React.useEffect(() => {\n    console.log('üöÄ DEVELOPMENT DEMO MODE ACTIVE');\n    console.log('üë§ Demo User:', DEMO_USER);\n    console.log('üîß Demo Profile:', DEMO_PROFILE);\n    console.log('üõ°Ô∏è All permissions enabled for development review');\n    console.log('üìù Define role-based access controls after reviewing all features');\n  }, []);\n\n  const value: DemoAuthContextType = {\n    user: DEMO_USER,\n    userProfile: DEMO_PROFILE,\n    isAdmin: true,\n    loading: false,\n    isVisualEditingEnabled: true,\n    \n    // Mock authentication functions with development logging\n    login: async (email: string, password: string) => {\n      console.log('Demo mode: Login bypassed for development review');\n      return true;\n    },\n    \n    logout: async () => {\n      console.log('Demo mode: Logout bypassed for development review');\n    },\n    \n    register: async (email: string, password: string) => {\n      console.log('Demo mode: Registration bypassed for development review');\n      return true;\n    },\n    \n    // Full permissions for demo mode - ALL features accessible\n    hasPermission: (feature: string, action: 'read' | 'write') => {\n      console.log(`Demo: Permission granted for ${feature}.${action}`);\n      return true;\n    },\n    canEdit: (feature?: string) => {\n      console.log(`Demo: Edit permission granted for ${feature || 'all features'}`);\n      return true;\n    },\n    canDelete: (feature?: string) => {\n      console.log(`Demo: Delete permission granted for ${feature || 'all features'}`);\n      return true;\n    },\n    canCreate: (feature?: string) => {\n      console.log(`Demo: Create permission granted for ${feature || 'all features'}`);\n      return true;\n    },\n    canViewLogs: (feature?: string) => {\n      console.log(`Demo: View logs permission granted for ${feature || 'all features'}`);\n      return true;\n    },\n  };\n\n  return (\n    <DemoAuthContext.Provider value={value}>\n      {children}\n    </DemoAuthContext.Provider>\n  );\n};\n\nexport const useDemoAuth = () => {\n  const context = useContext(DemoAuthContext);\n  if (context === undefined) {\n    throw new Error('useDemoAuth must be used within a DemoAuthProvider');\n  }\n  return context;\n};\n\nexport default DemoAuthProvider;\n","import { useContext } from 'react';\nimport { AuthContext } from '@/contexts/AuthContext';\nimport { DemoAuthContext } from '@/contexts/DemoAuthContext';\n\n/**\n * Smart auth hook that automatically detects and uses the appropriate auth context\n * - Uses DemoAuthContext when in demo mode\n * - Falls back to regular AuthContext otherwise\n */\nexport const useSmartAuth = () => {\n  // Try to get demo auth context first\n  const demoAuth = useContext(DemoAuthContext);\n  const regularAuth = useContext(AuthContext);\n\n  // If demo context is available, use it (demo mode is active)\n  if (demoAuth) {\n    console.log('üöÄ [Smart Auth] Using Demo Auth Context - Admin Access:', demoAuth.isAdmin);\n    return demoAuth;\n  }\n\n  // Otherwise, use regular auth context\n  console.log('üîê [Smart Auth] Using Regular Auth Context - Admin Access:', regularAuth?.isAdmin || false);\n  return regularAuth;\n};\n"],"names":["Database","createLucideIcon","XCircle","DemoAuthContext","createContext","useSmartAuth","demoAuth","useContext","regularAuth","AuthContext"],"mappings":"wJAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GASK,MAACA,EAAWC,EAAiB,WAAY,CAC5C,CAAC,UAAW,CAAE,GAAI,KAAM,GAAI,IAAK,GAAI,IAAK,GAAI,IAAK,IAAK,QAAQ,CAAE,EAClE,CAAC,OAAQ,CAAE,EAAG,4BAA6B,IAAK,QAAQ,CAAE,EAC1D,CAAC,OAAQ,CAAE,EAAG,wBAAyB,IAAK,QAAU,CAAA,CACxD,CAAC,ECbD;AAAA;AAAA;AAAA;AAAA;AAAA,GASK,MAACC,EAAUD,EAAiB,UAAW,CAC1C,CAAC,SAAU,CAAE,GAAI,KAAM,GAAI,KAAM,EAAG,KAAM,IAAK,SAAU,EACzD,CAAC,OAAQ,CAAE,EAAG,YAAa,IAAK,QAAQ,CAAE,EAC1C,CAAC,OAAQ,CAAE,EAAG,WAAY,IAAK,QAAU,CAAA,CAC3C,CAAC,ECuBKE,EAAkBC,gBAA+C,MAAS,EAUlE,IAAI,KAAK,EAAE,YAAY,ECrC9B,MAAMC,EAAe,IAAM,CAE1B,MAAAC,EAAWC,aAAWJ,CAAe,EACrCK,EAAcD,aAAWE,CAAW,EAG1C,OAAIH,GACM,QAAA,IAAI,0DAA2DA,EAAS,OAAO,EAChFA,IAIT,QAAQ,IAAI,8DAA8DE,GAAA,YAAAA,EAAa,UAAW,EAAK,EAChGA,EACT","x_google_ignoreList":[0,1]}