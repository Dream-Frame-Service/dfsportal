{"version":3,"file":"AuthContext-D76ueosG.js","sources":["../../src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { toast } from '@/hooks/use-toast';\nimport AuditLoggerService from '@/services/auditLogger';\nimport { supabase } from '@/lib/supabase';\nimport { AuthService } from '@/services/supabaseService';\n\ninterface User {\n  ID: number;\n  Name: string;\n  Email: string;\n  CreateTime: string;\n}\n\ninterface UserProfile {\n  ID: number;\n  user_id: number;\n  role: 'Administrator' | 'Management' | 'Employee';\n  station: string;\n  employee_id: string;\n  phone: string;\n  hire_date: string;\n  is_active: boolean;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  userProfile: UserProfile | null;\n  isAdmin: boolean;\n  login: (email: string, password: string) => Promise<boolean>;\n  logout: () => Promise<void>;\n  register: (email: string, password: string) => Promise<boolean>;\n  loading: boolean;\n  hasPermission: (feature: string, action: 'read' | 'write') => boolean;\n  canEdit: (feature?: string) => boolean;\n  canDelete: (feature?: string) => boolean;\n  canCreate: (feature?: string) => boolean;\n  canViewLogs: (feature?: string) => boolean;\n  isVisualEditingEnabled: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\n// Export the context for use in smart auth hook\nexport { AuthContext };\n\n// Access matrix with monitoring restrictions\nconst ACCESS_MATRIX = {\n  Employee: {\n    dashboard: ['read', 'write'],\n    products: ['read', 'write'],\n    employees: ['read', 'write'],\n    sales: ['read', 'write'],\n    vendors: ['read', 'write'],\n    orders: ['read', 'write'],\n    licenses: ['read', 'write'],\n    monitoring: [] // No monitoring access\n  },\n  Management: {\n    dashboard: ['read', 'write'],\n    products: ['read', 'write'],\n    employees: ['read', 'write'],\n    sales: ['read', 'write'],\n    vendors: ['read', 'write'],\n    orders: ['read', 'write'],\n    licenses: ['read', 'write'],\n    monitoring: [] // No monitoring access\n  },\n  Administrator: {\n    dashboard: ['read', 'write'],\n    products: ['read', 'write'],\n    employees: ['read', 'write'],\n    sales: ['read', 'write'],\n    vendors: ['read', 'write'],\n    orders: ['read', 'write'],\n    licenses: ['read', 'write'],\n    monitoring: ['read', 'write'] // Full monitoring access\n  }\n};\n\nexport const AuthProvider: React.FC<{children: ReactNode;}> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [userProfile, setUserProfile] = useState<UserProfile | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    checkUserSession();\n  }, []);\n\n  const checkUserSession = async () => {\n    try {\n      const { data, error } = await AuthService.getCurrentUser();\n      if (error) {\n        console.log('No active session');\n        setLoading(false);\n        return;\n      }\n\n      if (data) {\n        // Map Supabase user to legacy User interface\n        const legacyUser: User = {\n          ID: parseInt(data.id) || 0,\n          Name: data.email?.split('@')[0] || '',\n          Email: data.email || '',\n          CreateTime: data.created_at || new Date().toISOString()\n        };\n        setUser(legacyUser);\n        await fetchUserProfile(legacyUser.ID);\n      }\n    } catch (error) {\n      console.error('Session check error:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchUserProfile = async (userId: number) => {\n    try {\n      const { data, error } = await supabase\n        .from('user_profiles')\n        .select('*')\n        .eq('user_id', userId)\n        .single();\n\n      if (error && error.code !== 'PGRST116') { // PGRST116 = no rows found\n        throw error;\n      }\n\n      if (data) {\n        setUserProfile(data);\n      } else {\n        // Create default profile for new users with full access\n        const defaultProfile = {\n          user_id: userId,\n          role: 'Administrator' as const,\n          station: 'ALL',\n          employee_id: `EMP${userId.toString().padStart(4, '0')}`,\n          phone: '',\n          hire_date: new Date().toISOString(),\n          is_active: true\n        };\n\n        const { data: newProfile, error: createError } = await supabase\n          .from('user_profiles')\n          .insert(defaultProfile)\n          .select()\n          .single();\n\n        if (createError) throw createError;\n\n        if (newProfile) {\n          setUserProfile(newProfile);\n        }\n      }\n    } catch (error) {\n      console.error('Error fetching user profile:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load user profile\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const login = async (email: string, password: string): Promise<boolean> => {\n    const auditLogger = AuditLoggerService.getInstance();\n\n    try {\n      setLoading(true);\n      \n      const { data, error } = await supabase.auth.signInWithPassword({\n        email,\n        password\n      });\n\n      if (error) {\n        // Log failed login attempt\n        await auditLogger.logLogin(email, false, undefined, error.message);\n\n        toast({\n          title: \"Login Failed\",\n          description: error.message,\n          variant: \"destructive\"\n        });\n        return false;\n      }\n\n      // Get user info after successful login\n      const { data: userData, error: userError } = await AuthService.getCurrentUser();\n      if (userError) {\n        await auditLogger.logLogin(email, false, undefined, 'Failed to get user information');\n\n        toast({\n          title: \"Error\",\n          description: \"Failed to get user information\",\n          variant: \"destructive\"\n        });\n        return false;\n      }\n\n      // Map Supabase user to legacy User interface\n      const legacyUser: User = {\n        ID: parseInt(userData.id) || 0,\n        Name: userData.email?.split('@')[0] || '',\n        Email: userData.email || '',\n        CreateTime: userData.created_at || new Date().toISOString()\n      };\n      \n      setUser(legacyUser);\n      await fetchUserProfile(legacyUser.ID);\n\n      // Log successful login\n      await auditLogger.logLogin(email, true, legacyUser.ID);\n\n      toast({\n        title: \"Success\",\n        description: \"Login successful!\"\n      });\n\n      return true;\n    } catch (error) {\n      console.error('Login error:', error);\n      await auditLogger.logLogin(email, false, undefined, 'Unexpected error during login');\n\n      toast({\n        title: \"Error\",\n        description: \"An unexpected error occurred during login\",\n        variant: \"destructive\"\n      });\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const register = async (email: string, password: string): Promise<boolean> => {\n    const auditLogger = AuditLoggerService.getInstance();\n\n    try {\n      setLoading(true);\n      \n      const { data, error } = await supabase.auth.signUp({\n        email,\n        password\n      });\n\n      if (error) {\n        // Log failed registration attempt\n        await auditLogger.logRegistration(email, false, error.message);\n\n        toast({\n          title: \"Registration Failed\",\n          description: error.message,\n          variant: \"destructive\"\n        });\n        return false;\n      }\n\n      // Log successful registration\n      await auditLogger.logRegistration(email, true);\n\n      toast({\n        title: \"Registration Successful\",\n        description: \"Please check your email to verify your account.\"\n      });\n\n      return true;\n    } catch (error) {\n      console.error('Registration error:', error);\n      await auditLogger.logRegistration(email, false, 'Unexpected error during registration');\n\n      toast({\n        title: \"Error\",\n        description: \"An unexpected error occurred during registration\",\n        variant: \"destructive\"\n      });\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const logout = async () => {\n    const auditLogger = AuditLoggerService.getInstance();\n\n    try {\n      // Log logout before clearing user state\n      if (user) {\n        await auditLogger.logLogout(user.Email, user.ID);\n      }\n\n      await supabase.auth.signOut();\n      setUser(null);\n      setUserProfile(null);\n      toast({\n        title: \"Success\",\n        description: \"Logged out successfully\"\n      });\n    } catch (error) {\n      console.error('Logout error:', error);\n    }\n  };\n\n  const hasPermission = (feature: string, action: 'read' | 'write'): boolean => {\n    if (!userProfile) return false;\n\n    // Special handling for monitoring features\n    if (feature === 'monitoring') {\n      return userProfile.role === 'Administrator';\n    }\n\n    // Full access for all other features\n    return true;\n  };\n\n  const canEdit = (feature?: string): boolean => {\n    if (!userProfile) return false;\n\n    // Monitoring features restricted to Administrators\n    if (feature === 'monitoring') {\n      return userProfile.role === 'Administrator';\n    }\n\n    // Full visual editing access for all users and other features\n    return true;\n  };\n\n  const canDelete = (feature?: string): boolean => {\n    if (!userProfile) return false;\n\n    // Monitoring features restricted to Administrators\n    if (feature === 'monitoring') {\n      return userProfile.role === 'Administrator';\n    }\n\n    // Full delete access for all users and other features\n    return true;\n  };\n\n  const canCreate = (feature?: string): boolean => {\n    if (!userProfile) return false;\n\n    // Monitoring features restricted to Administrators\n    if (feature === 'monitoring') {\n      return userProfile.role === 'Administrator';\n    }\n\n    // Full create access for all users and other features\n    return true;\n  };\n\n  const canViewLogs = (feature?: string): boolean => {\n    if (!userProfile) return false;\n\n    // Monitoring features restricted to Administrators\n    if (feature === 'monitoring') {\n      return userProfile.role === 'Administrator';\n    }\n\n    // Full log viewing access for all users and other features\n    return true;\n  };\n\n  const isVisualEditingEnabled = true;\n  const isAdmin = userProfile?.role === 'Administrator';\n\n  const value = {\n    user,\n    userProfile,\n    isAdmin,\n    login,\n    logout,\n    register,\n    loading,\n    hasPermission,\n    canEdit,\n    canDelete,\n    canCreate,\n    canViewLogs,\n    isVisualEditingEnabled\n  };\n\n  return (\n    <AuthContext.Provider value={value} data-id=\"8nhyy6fc8\" data-path=\"src/contexts/AuthContext.tsx\">\n      {children}\n    </AuthContext.Provider>);\n\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};"],"names":["createContext","useContext"],"mappings":";;;AAwCM,MAAA,cAAcA,2BAA2C,MAAS;AA4VjE,MAAM,UAAU,MAAM;AACrB,QAAA,UAAUC,wBAAW,WAAW;AACtC,MAAI,YAAY,QAAW;AACnB,UAAA,IAAI,MAAM,6CAA6C;AAAA,EAAA;AAExD,SAAA;AACT;"}