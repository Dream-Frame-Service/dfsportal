{"version":3,"file":"textarea-B-Q9Uetu.js","sources":["../../node_modules/lucide-react/dist/esm/icons/camera.js","../../node_modules/lucide-react/dist/esm/icons/upload.js","../../src/hooks/use-smart-zero.ts","../../src/components/ui/number-input.tsx","../../src/components/ui/textarea.tsx"],"sourcesContent":["/**\n * @license lucide-react v0.344.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Camera = createLucideIcon(\"Camera\", [\n  [\n    \"path\",\n    {\n      d: \"M14.5 4h-5L7 7H4a2 2 0 0 0-2 2v9a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2h-3l-2.5-3z\",\n      key: \"1tc9qg\"\n    }\n  ],\n  [\"circle\", { cx: \"12\", cy: \"13\", r: \"3\", key: \"1vg3eu\" }]\n]);\n\nexport { Camera as default };\n//# sourceMappingURL=camera.js.map\n","/**\n * @license lucide-react v0.344.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Upload = createLucideIcon(\"Upload\", [\n  [\"path\", { d: \"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\", key: \"ih7n3h\" }],\n  [\"polyline\", { points: \"17 8 12 3 7 8\", key: \"t8dd8p\" }],\n  [\"line\", { x1: \"12\", x2: \"12\", y1: \"3\", y2: \"15\", key: \"widbto\" }]\n]);\n\nexport { Upload as default };\n//# sourceMappingURL=upload.js.map\n","import { useState, useCallback } from 'react';\n\nexport const useSmartZero = (initialValue: number | string = 0) => {\n  const [value, setValue] = useState<string>(String(initialValue || 0));\n  const [isFocused, setIsFocused] = useState(false);\n  const [hasUserInput, setHasUserInput] = useState(false);\n\n  const handleFocus = useCallback(() => {\n    setIsFocused(true);\n    // If the value is \"0\" and user hasn't manually entered it, clear it\n    if (value === \"0\" && !hasUserInput) {\n      setValue(\"\");\n    }\n  }, [value, hasUserInput]);\n\n  const handleBlur = useCallback(() => {\n    setIsFocused(false);\n    // If empty or just whitespace, default to \"0\"\n    if (!value.trim()) {\n      setValue(\"0\");\n      setHasUserInput(false);\n    }\n  }, [value]);\n\n  const handleChange = useCallback((newValue: string) => {\n    setValue(newValue);\n    setHasUserInput(true);\n  }, []);\n\n  const getNumericValue = useCallback(() => {\n    const numValue = parseFloat(value) || 0;\n    return numValue;\n  }, [value]);\n\n  const resetValue = useCallback((newValue: number | string = 0) => {\n    setValue(String(newValue || 0));\n    setHasUserInput(newValue !== 0);\n  }, []);\n\n  return {\n    value,\n    isFocused,\n    handleFocus,\n    handleBlur,\n    handleChange,\n    getNumericValue,\n    resetValue,\n    displayValue: isFocused && value === \"\" ? \"\" : value\n  };\n};\n","import * as React from \"react\"\nimport { cn } from \"@/lib/utils\"\nimport { useSmartZero } from \"@/hooks/use-smart-zero\"\n\nexport interface NumberInputProps\n  extends Omit<React.InputHTMLAttributes<HTMLInputElement>, 'value' | 'onChange'> {\n  value?: number | string\n  onChange?: (value: number) => void\n  onValueChange?: (value: string) => void\n}\n\nconst NumberInput = React.forwardRef<HTMLInputElement, NumberInputProps>(\n  ({ className, type = \"number\", value: propValue, onChange, onValueChange, ...props }, ref) => {\n    const smartZero = useSmartZero(propValue);\n\n    // Update internal value when prop changes\n    React.useEffect(() => {\n      if (propValue !== undefined && propValue !== smartZero.getNumericValue()) {\n        smartZero.resetValue(propValue);\n      }\n    }, [propValue]);\n\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n      const newValue = e.target.value;\n      smartZero.handleChange(newValue);\n      \n      // Call onChange with numeric value\n      if (onChange) {\n        const numericValue = parseFloat(newValue) || 0;\n        onChange(numericValue);\n      }\n      \n      // Call onValueChange with string value for more control\n      if (onValueChange) {\n        onValueChange(newValue);\n      }\n    };\n\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        value={smartZero.displayValue}\n        onChange={handleInputChange}\n        onFocus={smartZero.handleFocus}\n        onBlur={smartZero.handleBlur}\n        {...props}\n      />\n    )\n  }\n)\nNumberInput.displayName = \"NumberInput\"\n\nexport { NumberInput }\n","import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-base shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n"],"names":["Camera","createLucideIcon","Upload","useSmartZero","initialValue","value","setValue","useState","isFocused","setIsFocused","hasUserInput","setHasUserInput","handleFocus","useCallback","handleBlur","handleChange","newValue","getNumericValue","resetValue","NumberInput","React.forwardRef","className","type","propValue","onChange","onValueChange","props","ref","smartZero","React.useEffect","handleInputChange","e","numericValue","jsx","cn","Textarea"],"mappings":"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","x_google_ignoreList":[0,1]}