{"version":3,"file":"AuthContext-Bo8HSNc2.js","sources":["../../src/services/supabaseService.ts","../../src/contexts/AuthContext.tsx"],"sourcesContent":["import { type Database, supabase } from \"@/config/supabase\";\n\n// Generic types for database operations\ntype TableName = keyof Database[\"public\"][\"Tables\"];\ntype TableRow<T extends TableName> = Database[\"public\"][\"Tables\"][T][\"Row\"];\ntype TableInsert<T extends TableName> =\n  Database[\"public\"][\"Tables\"][T][\"Insert\"];\ntype TableUpdate<T extends TableName> =\n  Database[\"public\"][\"Tables\"][T][\"Update\"];\n\n// Helper function to convert table names\nfunction getTableName(table: TableName | symbol): string {\n  return typeof table === \"symbol\" ? String(table) : table;\n}\n\n// Create (Insert)\nexport async function createRecord<T extends TableName>(\n  table: T,\n  data: Partial<Database[\"public\"][\"Tables\"][T][\"Insert\"]>,\n): Promise<Database[\"public\"][\"Tables\"][T][\"Row\"] | null> {\n  const tableName = getTableName(table);\n  const channelName = `${tableName}_${Date.now()}`;\n\n  try {\n    const { data: result, error } = await supabase\n      .from(table)\n      .insert(data as any)\n      .select()\n      .single();\n\n    if (error) {\n      console.error(`Error creating ${tableName}:`, error);\n      return null;\n    }\n\n    return result;\n  } catch (err) {\n    console.error(`Error creating ${tableName}:`, err);\n    return null;\n  }\n}\n\n// Read (Select with pagination)\nexport async function readRecords<T extends TableName>(\n  table: T,\n  options: {\n    page?: number;\n    pageSize?: number;\n    orderBy?: keyof TableRow<T>;\n    ascending?: boolean;\n    filters?: { column: keyof TableRow<T>; operator: string; value: any }[];\n    select?: string;\n  } = {},\n): Promise<{\n  data: TableRow<T>[] | null;\n  count: number | null;\n  error: string | null;\n}> {\n  try {\n    const {\n      page = 1,\n      pageSize = 10,\n      orderBy = \"id\" as keyof TableRow<T>,\n      ascending = false,\n      filters = [],\n      select = \"*\",\n    } = options;\n\n    let query = supabase\n      .from(table)\n      .select(select, { count: \"exact\" });\n\n    // Apply filters\n    filters.forEach((filter) => {\n      const { column, operator, value } = filter;\n      switch (operator.toLowerCase()) {\n        case \"eq\":\n          query = query.eq(column as string, value);\n          break;\n        case \"neq\":\n          query = query.neq(column as string, value);\n          break;\n        case \"gt\":\n          query = query.gt(column as string, value);\n          break;\n        case \"gte\":\n          query = query.gte(column as string, value);\n          break;\n        case \"lt\":\n          query = query.lt(column as string, value);\n          break;\n        case \"lte\":\n          query = query.lte(column as string, value);\n          break;\n        case \"like\":\n          query = query.like(column as string, `%${value}%`);\n          break;\n        case \"ilike\":\n          query = query.ilike(column as string, `%${value}%`);\n          break;\n        default:\n          query = query.eq(column as string, value);\n      }\n    });\n\n    // Apply ordering\n    query = query.order(orderBy as string, { ascending });\n\n    // Apply pagination\n    const from = (page - 1) * pageSize;\n    const to = from + pageSize - 1;\n    query = query.range(from, to);\n\n    const { data, count, error } = await query;\n\n    if (error) {\n      console.error(`Error reading ${table}:`, error);\n      return { data: null, count: null, error: error.message };\n    }\n\n    return { data: (data as unknown) as TableRow<T>[], count, error: null };\n  } catch (err) {\n    console.error(`Error reading ${table}:`, err);\n    return { data: null, count: null, error: \"An unexpected error occurred\" };\n  }\n}\n\n// Update\nexport async function updateRecord<T extends TableName>(\n  table: T,\n  id: number,\n  data: TableUpdate<T>,\n): Promise<{ data: TableRow<T> | null; error: string | null }> {\n  try {\n    const { data: result, error } = await supabase\n      .from(table)\n      .update(data as any)\n      .eq(\"id\", id)\n      .select()\n      .single();\n\n    if (error) {\n      console.error(`Error updating ${table}:`, error);\n      return { data: null, error: error.message };\n    }\n\n    return { data: result, error: null };\n  } catch (err) {\n    console.error(`Error updating ${table}:`, err);\n    return { data: null, error: \"An unexpected error occurred\" };\n  }\n}\n\n// Delete\nexport async function deleteRecord<T extends TableName>(\n  table: T,\n  id: number,\n): Promise<{ error: string | null }> {\n  try {\n    const { error } = await supabase\n      .from(table)\n      .delete()\n      .eq(\"id\", id);\n\n    if (error) {\n      console.error(`Error deleting from ${table}:`, error);\n      return { error: error.message };\n    }\n\n    return { error: null };\n  } catch (err) {\n    console.error(`Error deleting from ${table}:`, err);\n    return { error: \"An unexpected error occurred\" };\n  }\n}\n\n// Batch operations\nexport async function batchCreate<T extends TableName>(\n  table: T,\n  data: TableInsert<T>[],\n): Promise<{ data: TableRow<T>[] | null; error: string | null }> {\n  try {\n    const { data: result, error } = await supabase\n      .from(table)\n      .insert(data as any)\n      .select();\n\n    if (error) {\n      console.error(`Error batch creating ${table}:`, error);\n      return { data: null, error: error.message };\n    }\n\n    return { data: result, error: null };\n  } catch (err) {\n    console.error(`Error batch creating ${table}:`, err);\n    return { data: null, error: \"An unexpected error occurred\" };\n  }\n}\n\nexport async function batchUpdate<T extends TableName>(\n  table: T,\n  updates: { id: number; data: TableUpdate<T> }[],\n): Promise<{ data: TableRow<T>[] | null; error: string | null }> {\n  try {\n    const results = await Promise.all(\n      updates.map(({ id, data }) => updateRecord(table, id, data)),\n    );\n\n    const errors = results.filter((r) => r.error).map((r) => r.error);\n    if (errors.length > 0) {\n      return { data: null, error: errors.join(\", \") };\n    }\n\n    const data = results.map((r) => r.data).filter(Boolean) as TableRow<T>[];\n    return { data, error: null };\n  } catch (err) {\n    console.error(`Error batch updating ${table}:`, err);\n    return { data: null, error: \"An unexpected error occurred\" };\n  }\n}\n\nexport async function batchDelete<T extends TableName>(\n  table: T,\n  ids: number[],\n): Promise<{ error: string | null }> {\n  try {\n    const { error } = await supabase\n      .from(table)\n      .delete()\n      .in(\"id\", ids);\n\n    if (error) {\n      console.error(`Error batch deleting from ${table}:`, error);\n      return { error: error.message };\n    }\n\n    return { error: null };\n  } catch (err) {\n    console.error(`Error batch deleting from ${table}:`, err);\n    return { error: \"An unexpected error occurred\" };\n  }\n}\n\n// File upload\nexport async function uploadFile(\n  bucket: string,\n  path: string,\n  file: File,\n): Promise<{ data: { path: string } | null; error: string | null }> {\n  try {\n    const { data, error } = await supabase.storage\n      .from(bucket)\n      .upload(path, file, {\n        cacheControl: \"3600\",\n        upsert: false,\n      });\n\n    if (error) {\n      console.error(\"Error uploading file:\", error);\n      return { data: null, error: error.message };\n    }\n\n    return { data, error: null };\n  } catch (err) {\n    console.error(\"Error uploading file:\", err);\n    return { data: null, error: \"An unexpected error occurred\" };\n  }\n}\n\n// Get file URL\nexport function getFileUrl(bucket: string, path: string): string {\n  const { data } = supabase.storage\n    .from(bucket)\n    .getPublicUrl(path);\n\n  return data.publicUrl;\n}\n\n// ========================================\n// ENHANCED SERVICE METHODS\n// ========================================\n\n// Email service\nexport class EmailService {\n  static async sendEmail(emailData: {\n    from: string;\n    to: string | string[];\n    subject: string;\n    html: string;\n    text?: string;\n  }): Promise<{ data?: any; error: string | null }> {\n    try {\n      // For now, we'll simulate email sending for development\n      // In production, this would integrate with an email service like Resend, SendGrid, etc.\n      console.log(\"ðŸ“§ Email would be sent:\", {\n        from: emailData.from,\n        to: emailData.to,\n        subject: emailData.subject,\n        preview: `${emailData.html.substring(0, 100)}...`,\n      });\n\n      // You can replace this with actual email service integration\n      // For example, using Supabase Edge Functions:\n      /*\n      const { data, error } = await supabase.functions.invoke('send-email', {\n        body: emailData\n      });\n\n      if (error) {\n        console.error('Email sending error:', error);\n        return { error: error.message };\n      }\n\n      return { data, error: null };\n      */\n\n      // For development, simulate successful email\n      return {\n        data: {\n          message: \"Email logged successfully (development mode)\",\n          emailData,\n        },\n        error: null,\n      };\n    } catch (error) {\n      console.error(\"Error in sendEmail:\", error);\n      return {\n        error: error instanceof Error ? error.message : \"Unknown error\",\n      };\n    }\n  }\n}\n\n// Authentication service\nexport class AuthService {\n  static async getCurrentUser() {\n    try {\n      const { data: { user }, error: authError } = await supabase.auth\n        .getUser();\n\n      if (authError || !user) {\n        return {\n          data: null,\n          error: authError?.message || \"User not authenticated\",\n        };\n      }\n\n      const { data: profile, error: profileError } = await supabase\n        .from(\"user_profiles\")\n        .select(\"*\")\n        .eq(\"user_id\", user.id)\n        .single();\n\n      if (profileError) {\n        return {\n          data: {\n            id: user.id,\n            email: user.email,\n            role: \"Employee\",\n            created_at: user.created_at,\n          },\n          error: null,\n        };\n      }\n\n      return {\n        data: {\n          id: user.id,\n          email: user.email,\n          ...profile,\n        },\n        error: null,\n      };\n    } catch (error) {\n      console.error(\"Error in getCurrentUser:\", error);\n      return {\n        data: null,\n        error: error instanceof Error ? error.message : \"Unknown error\",\n      };\n    }\n  }\n\n  static async register(credentials: { email: string; password: string }) {\n    try {\n      const { data, error } = await supabase.auth.signUp({\n        email: credentials.email,\n        password: credentials.password,\n      });\n\n      if (error) {\n        console.error(\"Supabase registration error:\", error);\n        return { data: null, error: error.message };\n      }\n\n      return { data, error: null };\n    } catch (error) {\n      console.error(\"Error in register:\", error);\n      return {\n        data: null,\n        error: error instanceof Error ? error.message : \"Unknown error\",\n      };\n    }\n  }\n}\n\n// Helpers so `import { supabase } ...` keeps compiling\nexport { supabase }; // named export\n\n// Lo-fi realtime stub â€“ replace with real manager later.\nexport const realtimeManager = {\n  subscribe: (..._args: any[]) => {/* no-op */},\n  unsubscribe: (..._args: any[]) => {/* no-op */},\n};\n\n// ---------------------------------------------\n// SINGLE service aggregator & default export\n// ---------------------------------------------\nexport const SupabaseService = {\n  createRecord,\n  readRecords,\n  updateRecord,\n  deleteRecord,\n  batchCreate,\n  batchUpdate,\n  batchDelete,\n  uploadFile,\n  getFileUrl,\n  deleteFile,\n  subscribeToChanges,\n  unsubscribeFromChanges,\n  executeRpc,\n  searchRecords,\n};\n\nexport default SupabaseService;\n","import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { toast } from '@/hooks/use-toast';\nimport AuditLoggerService from '@/services/auditLogger';\nimport { supabase } from '@/lib/supabase';\nimport { AuthService } from '@/services/supabaseService';\n\ninterface User {\n  ID: number;\n  Name: string;\n  Email: string;\n  CreateTime: string;\n}\n\ninterface UserProfile {\n  ID: number;\n  user_id: number;\n  role: 'Administrator' | 'Management' | 'Employee';\n  station: string;\n  employee_id: string;\n  phone: string;\n  hire_date: string;\n  is_active: boolean;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  userProfile: UserProfile | null;\n  isAdmin: boolean;\n  login: (email: string, password: string) => Promise<boolean>;\n  logout: () => Promise<void>;\n  register: (email: string, password: string) => Promise<boolean>;\n  loading: boolean;\n  hasPermission: (feature: string, action: 'read' | 'write') => boolean;\n  canEdit: (feature?: string) => boolean;\n  canDelete: (feature?: string) => boolean;\n  canCreate: (feature?: string) => boolean;\n  canViewLogs: (feature?: string) => boolean;\n  isVisualEditingEnabled: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\n// Export the context for use in smart auth hook\nexport { AuthContext };\n\n// Access matrix with monitoring restrictions\nconst ACCESS_MATRIX = {\n  Employee: {\n    dashboard: ['read', 'write'],\n    products: ['read', 'write'],\n    employees: ['read', 'write'],\n    sales: ['read', 'write'],\n    vendors: ['read', 'write'],\n    orders: ['read', 'write'],\n    licenses: ['read', 'write'],\n    monitoring: [] // No monitoring access\n  },\n  Management: {\n    dashboard: ['read', 'write'],\n    products: ['read', 'write'],\n    employees: ['read', 'write'],\n    sales: ['read', 'write'],\n    vendors: ['read', 'write'],\n    orders: ['read', 'write'],\n    licenses: ['read', 'write'],\n    monitoring: [] // No monitoring access\n  },\n  Administrator: {\n    dashboard: ['read', 'write'],\n    products: ['read', 'write'],\n    employees: ['read', 'write'],\n    sales: ['read', 'write'],\n    vendors: ['read', 'write'],\n    orders: ['read', 'write'],\n    licenses: ['read', 'write'],\n    monitoring: ['read', 'write'] // Full monitoring access\n  }\n};\n\nexport const AuthProvider: React.FC<{children: ReactNode;}> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [userProfile, setUserProfile] = useState<UserProfile | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    checkUserSession();\n  }, []);\n\n  const checkUserSession = async () => {\n    try {\n      const { data, error } = await AuthService.getCurrentUser();\n      if (error) {\n        console.log('No active session');\n        setLoading(false);\n        return;\n      }\n\n      if (data) {\n        // Map Supabase user to legacy User interface\n        const legacyUser: User = {\n          ID: parseInt(data.id) || 0,\n          Name: data.email?.split('@')[0] || '',\n          Email: data.email || '',\n          CreateTime: data.created_at || new Date().toISOString()\n        };\n        setUser(legacyUser);\n        await fetchUserProfile(legacyUser.ID);\n      }\n    } catch (error) {\n      console.error('Session check error:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchUserProfile = async (userId: number) => {\n    try {\n      const { data, error } = await supabase\n        .from('user_profiles')\n        .select('*')\n        .eq('user_id', userId)\n        .single();\n\n      if (error && error.code !== 'PGRST116') { // PGRST116 = no rows found\n        throw error;\n      }\n\n      if (data) {\n        setUserProfile(data);\n      } else {\n        // Create default profile for new users with full access\n        const defaultProfile = {\n          user_id: userId,\n          role: 'Administrator' as const,\n          station: 'ALL',\n          employee_id: `EMP${userId.toString().padStart(4, '0')}`,\n          phone: '',\n          hire_date: new Date().toISOString(),\n          is_active: true\n        };\n\n        const { data: newProfile, error: createError } = await supabase\n          .from('user_profiles')\n          .insert(defaultProfile)\n          .select()\n          .single();\n\n        if (createError) throw createError;\n\n        if (newProfile) {\n          setUserProfile(newProfile);\n        }\n      }\n    } catch (error) {\n      console.error('Error fetching user profile:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load user profile\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const login = async (email: string, password: string): Promise<boolean> => {\n    const auditLogger = AuditLoggerService.getInstance();\n\n    try {\n      setLoading(true);\n      \n      const { data, error } = await supabase.auth.signInWithPassword({\n        email,\n        password\n      });\n\n      if (error) {\n        // Log failed login attempt\n        await auditLogger.logLogin(email, false, undefined, error.message);\n\n        toast({\n          title: \"Login Failed\",\n          description: error.message,\n          variant: \"destructive\"\n        });\n        return false;\n      }\n\n      // Get user info after successful login\n      const { data: userData, error: userError } = await AuthService.getCurrentUser();\n      if (userError) {\n        await auditLogger.logLogin(email, false, undefined, 'Failed to get user information');\n\n        toast({\n          title: \"Error\",\n          description: \"Failed to get user information\",\n          variant: \"destructive\"\n        });\n        return false;\n      }\n\n      // Map Supabase user to legacy User interface\n      const legacyUser: User = {\n        ID: parseInt(userData.id) || 0,\n        Name: userData.email?.split('@')[0] || '',\n        Email: userData.email || '',\n        CreateTime: userData.created_at || new Date().toISOString()\n      };\n      \n      setUser(legacyUser);\n      await fetchUserProfile(legacyUser.ID);\n\n      // Log successful login\n      await auditLogger.logLogin(email, true, legacyUser.ID);\n\n      toast({\n        title: \"Success\",\n        description: \"Login successful!\"\n      });\n\n      return true;\n    } catch (error) {\n      console.error('Login error:', error);\n      await auditLogger.logLogin(email, false, undefined, 'Unexpected error during login');\n\n      toast({\n        title: \"Error\",\n        description: \"An unexpected error occurred during login\",\n        variant: \"destructive\"\n      });\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const register = async (email: string, password: string): Promise<boolean> => {\n    const auditLogger = AuditLoggerService.getInstance();\n\n    try {\n      setLoading(true);\n      \n      const { data, error } = await supabase.auth.signUp({\n        email,\n        password\n      });\n\n      if (error) {\n        // Log failed registration attempt\n        await auditLogger.logRegistration(email, false, error.message);\n\n        toast({\n          title: \"Registration Failed\",\n          description: error.message,\n          variant: \"destructive\"\n        });\n        return false;\n      }\n\n      // Log successful registration\n      await auditLogger.logRegistration(email, true);\n\n      toast({\n        title: \"Registration Successful\",\n        description: \"Please check your email to verify your account.\"\n      });\n\n      return true;\n    } catch (error) {\n      console.error('Registration error:', error);\n      await auditLogger.logRegistration(email, false, 'Unexpected error during registration');\n\n      toast({\n        title: \"Error\",\n        description: \"An unexpected error occurred during registration\",\n        variant: \"destructive\"\n      });\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const logout = async () => {\n    const auditLogger = AuditLoggerService.getInstance();\n\n    try {\n      // Log logout before clearing user state\n      if (user) {\n        await auditLogger.logLogout(user.Email, user.ID);\n      }\n\n      await supabase.auth.signOut();\n      setUser(null);\n      setUserProfile(null);\n      toast({\n        title: \"Success\",\n        description: \"Logged out successfully\"\n      });\n    } catch (error) {\n      console.error('Logout error:', error);\n    }\n  };\n\n  const hasPermission = (feature: string, action: 'read' | 'write'): boolean => {\n    if (!userProfile) return false;\n\n    // Special handling for monitoring features\n    if (feature === 'monitoring') {\n      return userProfile.role === 'Administrator';\n    }\n\n    // Full access for all other features\n    return true;\n  };\n\n  const canEdit = (feature?: string): boolean => {\n    if (!userProfile) return false;\n\n    // Monitoring features restricted to Administrators\n    if (feature === 'monitoring') {\n      return userProfile.role === 'Administrator';\n    }\n\n    // Full visual editing access for all users and other features\n    return true;\n  };\n\n  const canDelete = (feature?: string): boolean => {\n    if (!userProfile) return false;\n\n    // Monitoring features restricted to Administrators\n    if (feature === 'monitoring') {\n      return userProfile.role === 'Administrator';\n    }\n\n    // Full delete access for all users and other features\n    return true;\n  };\n\n  const canCreate = (feature?: string): boolean => {\n    if (!userProfile) return false;\n\n    // Monitoring features restricted to Administrators\n    if (feature === 'monitoring') {\n      return userProfile.role === 'Administrator';\n    }\n\n    // Full create access for all users and other features\n    return true;\n  };\n\n  const canViewLogs = (feature?: string): boolean => {\n    if (!userProfile) return false;\n\n    // Monitoring features restricted to Administrators\n    if (feature === 'monitoring') {\n      return userProfile.role === 'Administrator';\n    }\n\n    // Full log viewing access for all users and other features\n    return true;\n  };\n\n  const isVisualEditingEnabled = true;\n  const isAdmin = userProfile?.role === 'Administrator';\n\n  const value = {\n    user,\n    userProfile,\n    isAdmin,\n    login,\n    logout,\n    register,\n    loading,\n    hasPermission,\n    canEdit,\n    canDelete,\n    canCreate,\n    canViewLogs,\n    isVisualEditingEnabled\n  };\n\n  return (\n    <AuthContext.Provider value={value} data-id=\"8nhyy6fc8\" data-path=\"src/contexts/AuthContext.tsx\">\n      {children}\n    </AuthContext.Provider>);\n\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n"],"names":["getTableName","table","createRecord","data","tableName","result","error","supabase","err","readRecords","options","page","pageSize","orderBy","ascending","filters","select","query","filter","column","operator","value","from","to","count","updateRecord","id","deleteRecord","batchCreate","batchUpdate","updates","results","errors","r","batchDelete","ids","uploadFile","bucket","path","file","getFileUrl","EmailService","emailData","AuthService","user","authError","profile","profileError","credentials","SupabaseService","AuthContext","createContext","useAuth","context","useContext"],"mappings":"0GAWA,SAASA,EAAaC,EAAmC,CACvD,OAAO,OAAOA,GAAU,SAAW,OAAOA,CAAK,EAAIA,CACrD,CAGsB,eAAAC,EACpBD,EACAE,EACwD,CAClD,MAAAC,EAAYJ,EAAaC,CAAK,EAGhC,GAAA,CACF,KAAM,CAAE,KAAMI,EAAQ,MAAAC,GAAU,MAAMC,EACnC,KAAKN,CAAK,EACV,OAAOE,CAAW,EAClB,OAAA,EACA,OAAO,EAEV,OAAIG,GACF,QAAQ,MAAM,kBAAkBF,CAAS,IAAKE,CAAK,EAC5C,MAGFD,QACAG,EAAK,CACZ,eAAQ,MAAM,kBAAkBJ,CAAS,IAAKI,CAAG,EAC1C,IAAA,CAEX,CAGA,eAAsBC,EACpBR,EACAS,EAOI,GAKH,CACG,GAAA,CACI,KAAA,CACJ,KAAAC,EAAO,EACP,SAAAC,EAAW,GACX,QAAAC,EAAU,KACV,UAAAC,EAAY,GACZ,QAAAC,EAAU,CAAC,EACX,OAAAC,EAAS,GAAA,EACPN,EAEA,IAAAO,EAAQV,EACT,KAAKN,CAAK,EACV,OAAOe,EAAQ,CAAE,MAAO,QAAS,EAG5BD,EAAA,QAASG,GAAW,CAC1B,KAAM,CAAE,OAAAC,EAAQ,SAAAC,EAAU,MAAAC,CAAU,EAAAH,EAC5B,OAAAE,EAAS,YAAe,EAAA,CAC9B,IAAK,KACKH,EAAAA,EAAM,GAAGE,EAAkBE,CAAK,EACxC,MACF,IAAK,MACKJ,EAAAA,EAAM,IAAIE,EAAkBE,CAAK,EACzC,MACF,IAAK,KACKJ,EAAAA,EAAM,GAAGE,EAAkBE,CAAK,EACxC,MACF,IAAK,MACKJ,EAAAA,EAAM,IAAIE,EAAkBE,CAAK,EACzC,MACF,IAAK,KACKJ,EAAAA,EAAM,GAAGE,EAAkBE,CAAK,EACxC,MACF,IAAK,MACKJ,EAAAA,EAAM,IAAIE,EAAkBE,CAAK,EACzC,MACF,IAAK,OACHJ,EAAQA,EAAM,KAAKE,EAAkB,IAAIE,CAAK,GAAG,EACjD,MACF,IAAK,QACHJ,EAAQA,EAAM,MAAME,EAAkB,IAAIE,CAAK,GAAG,EAClD,MACF,QACUJ,EAAAA,EAAM,GAAGE,EAAkBE,CAAK,CAAA,CAC5C,CACD,EAGDJ,EAAQA,EAAM,MAAMJ,EAAmB,CAAE,UAAAC,EAAW,EAG9C,MAAAQ,GAAQX,EAAO,GAAKC,EACpBW,EAAKD,EAAOV,EAAW,EACrBK,EAAAA,EAAM,MAAMK,EAAMC,CAAE,EAE5B,KAAM,CAAE,KAAApB,EAAM,MAAAqB,EAAO,MAAAlB,CAAA,EAAU,MAAMW,EAErC,OAAIX,GACF,QAAQ,MAAM,iBAAiBL,CAAK,IAAKK,CAAK,EACvC,CAAE,KAAM,KAAM,MAAO,KAAM,MAAOA,EAAM,OAAQ,GAGlD,CAAE,KAAAH,EAA0C,MAAAqB,EAAO,MAAO,IAAK,QAC/DhB,EAAK,CACZ,eAAQ,MAAM,iBAAiBP,CAAK,IAAKO,CAAG,EACrC,CAAE,KAAM,KAAM,MAAO,KAAM,MAAO,8BAA+B,CAAA,CAE5E,CAGsB,eAAAiB,EACpBxB,EACAyB,EACAvB,EAC6D,CACzD,GAAA,CACF,KAAM,CAAE,KAAME,EAAQ,MAAAC,CAAU,EAAA,MAAMC,EACnC,KAAKN,CAAK,EACV,OAAOE,CAAW,EAClB,GAAG,KAAMuB,CAAE,EACX,SACA,OAAO,EAEV,OAAIpB,GACF,QAAQ,MAAM,kBAAkBL,CAAK,IAAKK,CAAK,EACxC,CAAE,KAAM,KAAM,MAAOA,EAAM,OAAQ,GAGrC,CAAE,KAAMD,EAAQ,MAAO,IAAK,QAC5BG,EAAK,CACZ,eAAQ,MAAM,kBAAkBP,CAAK,IAAKO,CAAG,EACtC,CAAE,KAAM,KAAM,MAAO,8BAA+B,CAAA,CAE/D,CAGsB,eAAAmB,EACpB1B,EACAyB,EACmC,CAC/B,GAAA,CACF,KAAM,CAAE,MAAApB,CAAA,EAAU,MAAMC,EACrB,KAAKN,CAAK,EACV,OAAO,EACP,GAAG,KAAMyB,CAAE,EAEd,OAAIpB,GACF,QAAQ,MAAM,uBAAuBL,CAAK,IAAKK,CAAK,EAC7C,CAAE,MAAOA,EAAM,OAAQ,GAGzB,CAAE,MAAO,IAAK,QACdE,EAAK,CACZ,eAAQ,MAAM,uBAAuBP,CAAK,IAAKO,CAAG,EAC3C,CAAE,MAAO,8BAA+B,CAAA,CAEnD,CAGsB,eAAAoB,EACpB3B,EACAE,EAC+D,CAC3D,GAAA,CACF,KAAM,CAAE,KAAME,EAAQ,MAAAC,CAAU,EAAA,MAAMC,EACnC,KAAKN,CAAK,EACV,OAAOE,CAAW,EAClB,OAAO,EAEV,OAAIG,GACF,QAAQ,MAAM,wBAAwBL,CAAK,IAAKK,CAAK,EAC9C,CAAE,KAAM,KAAM,MAAOA,EAAM,OAAQ,GAGrC,CAAE,KAAMD,EAAQ,MAAO,IAAK,QAC5BG,EAAK,CACZ,eAAQ,MAAM,wBAAwBP,CAAK,IAAKO,CAAG,EAC5C,CAAE,KAAM,KAAM,MAAO,8BAA+B,CAAA,CAE/D,CAEsB,eAAAqB,EACpB5B,EACA6B,EAC+D,CAC3D,GAAA,CACI,MAAAC,EAAU,MAAM,QAAQ,IAC5BD,EAAQ,IAAI,CAAC,CAAE,GAAAJ,EAAI,KAAAvB,CAAK,IAAMsB,EAAaxB,EAAOyB,EAAIvB,CAAI,CAAC,CAC7D,EAEM6B,EAASD,EAAQ,OAAQE,GAAMA,EAAE,KAAK,EAAE,IAAKA,GAAMA,EAAE,KAAK,EAC5D,OAAAD,EAAO,OAAS,EACX,CAAE,KAAM,KAAM,MAAOA,EAAO,KAAK,IAAI,CAAE,EAIzC,CAAE,KADID,EAAQ,IAAKE,GAAMA,EAAE,IAAI,EAAE,OAAO,OAAO,EACvC,MAAO,IAAK,QACpBzB,EAAK,CACZ,eAAQ,MAAM,wBAAwBP,CAAK,IAAKO,CAAG,EAC5C,CAAE,KAAM,KAAM,MAAO,8BAA+B,CAAA,CAE/D,CAEsB,eAAA0B,EACpBjC,EACAkC,EACmC,CAC/B,GAAA,CACF,KAAM,CAAE,MAAA7B,CAAA,EAAU,MAAMC,EACrB,KAAKN,CAAK,EACV,OAAO,EACP,GAAG,KAAMkC,CAAG,EAEf,OAAI7B,GACF,QAAQ,MAAM,6BAA6BL,CAAK,IAAKK,CAAK,EACnD,CAAE,MAAOA,EAAM,OAAQ,GAGzB,CAAE,MAAO,IAAK,QACdE,EAAK,CACZ,eAAQ,MAAM,6BAA6BP,CAAK,IAAKO,CAAG,EACjD,CAAE,MAAO,8BAA+B,CAAA,CAEnD,CAGsB,eAAA4B,EACpBC,EACAC,EACAC,EACkE,CAC9D,GAAA,CACF,KAAM,CAAE,KAAApC,EAAM,MAAAG,CAAM,EAAI,MAAMC,EAAS,QACpC,KAAK8B,CAAM,EACX,OAAOC,EAAMC,EAAM,CAClB,aAAc,OACd,OAAQ,EAAA,CACT,EAEH,OAAIjC,GACM,QAAA,MAAM,wBAAyBA,CAAK,EACrC,CAAE,KAAM,KAAM,MAAOA,EAAM,OAAQ,GAGrC,CAAE,KAAAH,EAAM,MAAO,IAAK,QACpBK,EAAK,CACJ,eAAA,MAAM,wBAAyBA,CAAG,EACnC,CAAE,KAAM,KAAM,MAAO,8BAA+B,CAAA,CAE/D,CAGgB,SAAAgC,EAAWH,EAAgBC,EAAsB,CACzD,KAAA,CAAE,KAAAnC,CAAS,EAAAI,EAAS,QACvB,KAAK8B,CAAM,EACX,aAAaC,CAAI,EAEpB,OAAOnC,EAAK,SACd,CAOO,MAAMsC,CAAa,CACxB,aAAa,UAAUC,EAM2B,CAC5C,GAAA,CAGF,eAAQ,IAAI,0BAA2B,CACrC,KAAMA,EAAU,KAChB,GAAIA,EAAU,GACd,QAASA,EAAU,QACnB,QAAS,GAAGA,EAAU,KAAK,UAAU,EAAG,GAAG,CAAC,KAAA,CAC7C,EAkBM,CACL,KAAM,CACJ,QAAS,+CACT,UAAAA,CACF,EACA,MAAO,IACT,QACOpC,EAAO,CACN,eAAA,MAAM,sBAAuBA,CAAK,EACnC,CACL,MAAOA,aAAiB,MAAQA,EAAM,QAAU,eAClD,CAAA,CACF,CAEJ,CAGO,MAAMqC,CAAY,CACvB,aAAa,gBAAiB,CACxB,GAAA,CACI,KAAA,CAAE,KAAM,CAAE,KAAAC,GAAQ,MAAOC,CAAA,EAAc,MAAMtC,EAAS,KACzD,QAAQ,EAEP,GAAAsC,GAAa,CAACD,EACT,MAAA,CACL,KAAM,KACN,OAAOC,GAAA,YAAAA,EAAW,UAAW,wBAC/B,EAGF,KAAM,CAAE,KAAMC,EAAS,MAAOC,GAAiB,MAAMxC,EAClD,KAAK,eAAe,EACpB,OAAO,GAAG,EACV,GAAG,UAAWqC,EAAK,EAAE,EACrB,OAAO,EAEV,OAAIG,EACK,CACL,KAAM,CACJ,GAAIH,EAAK,GACT,MAAOA,EAAK,MACZ,KAAM,WACN,WAAYA,EAAK,UACnB,EACA,MAAO,IACT,EAGK,CACL,KAAM,CACJ,GAAIA,EAAK,GACT,MAAOA,EAAK,MACZ,GAAGE,CACL,EACA,MAAO,IACT,QACOxC,EAAO,CACN,eAAA,MAAM,2BAA4BA,CAAK,EACxC,CACL,KAAM,KACN,MAAOA,aAAiB,MAAQA,EAAM,QAAU,eAClD,CAAA,CACF,CAGF,aAAa,SAAS0C,EAAkD,CAClE,GAAA,CACF,KAAM,CAAE,KAAA7C,EAAM,MAAAG,CAAA,EAAU,MAAMC,EAAS,KAAK,OAAO,CACjD,MAAOyC,EAAY,MACnB,SAAUA,EAAY,QAAA,CACvB,EAED,OAAI1C,GACM,QAAA,MAAM,+BAAgCA,CAAK,EAC5C,CAAE,KAAM,KAAM,MAAOA,EAAM,OAAQ,GAGrC,CAAE,KAAAH,EAAM,MAAO,IAAK,QACpBG,EAAO,CACN,eAAA,MAAM,qBAAsBA,CAAK,EAClC,CACL,KAAM,KACN,MAAOA,aAAiB,MAAQA,EAAM,QAAU,eAClD,CAAA,CACF,CAEJ,CAcO,MAAM2C,EAAkB,CAC7B,aAAA/C,EACA,YAAAO,EACA,aAAAgB,EACA,aAAAE,EACA,YAAAC,EACA,YAAAC,EACA,YAAAK,EACA,WAAAE,EACA,WAAAI,EACA,WACA,mBACA,uBACA,WACA,aACF,ECxYMU,EAAcC,gBAA2C,MAAS,EA4V3DC,EAAU,IAAM,CACrB,MAAAC,EAAUC,aAAWJ,CAAW,EACtC,GAAIG,IAAY,OACR,MAAA,IAAI,MAAM,6CAA6C,EAExD,OAAAA,CACT"}