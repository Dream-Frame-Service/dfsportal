{"version":3,"file":"databaseService-De-l3oBE.js","sources":["../../src/services/databaseService.ts"],"sourcesContent":["import { SupabaseService, AuthService, EmailService } from '@/services/supabaseService';\n\n/* --------------------------------------------------------------\n   Table ID to table name mapping\n   This maintains compatibility with the existing numeric table IDs\n-----------------------------------------------------------------*/\nconst TABLE_MAP: Record<string | number, string> = {\n    11725: \"user_profiles\",\n    11726: \"products\", \n    11727: \"employees\",\n    11728: \"salary\",\n    11729: \"vendors\",\n    11730: \"orders\",\n    11731: \"licenses\",\n    12356: \"sales_reports\",\n    12599: \"stations\",\n    12612: \"sms_contacts\",\n    12613: \"sms_history\",\n    12640: \"sms_providers\",\n    12641: \"sms_templates\",\n    12642: \"alert_schedules\",\n    12706: \"audit_logs\",\n    11756: \"product_logs\",\n    12196: \"notifications\",\n    12611: \"sms_settings\",\n};\n\ntype TableId = keyof typeof TABLE_MAP | string | number;\n\n/* --------------------------------------------------------------\n   Convert ezsite-style filters to Supabase filters\n-----------------------------------------------------------------*/\nconst convertFilters = (filters: any[] = []) => {\n    return filters.map(filter => {\n        const { name, op, value } = filter;\n        let operator = 'eq';\n        \n        switch (op) {\n            case 'Equal':\n                operator = 'eq';\n                break;\n            case 'StringContains':\n                operator = 'ilike';\n                break;\n            case 'GreaterThan':\n                operator = 'gt';\n                break;\n            case 'LessThan':\n                operator = 'lt';\n                break;\n            case 'GreaterThanOrEqual':\n                operator = 'gte';\n                break;\n            case 'LessThanOrEqual':\n                operator = 'lte';\n                break;\n            default:\n                operator = 'eq';\n        }\n        \n        return {\n            column: name,\n            operator,\n            value: op === 'StringContains' ? `%${value}%` : value\n        };\n    });\n};\n\n/* --------------------------------------------------------------\n   Database Service - Direct Supabase API calls\n-----------------------------------------------------------------*/\nexport class DatabaseService {\n    \n    // List records with pagination (replaces ezsite tablePage)\n    static async tablePage<T extends TableId>(\n        tableId: T,\n        options: {\n            PageNo?: number;\n            PageSize?: number;\n            OrderByField?: string;\n            IsAsc?: boolean;\n            Filters?: any[];\n            Select?: string;\n        } = {}\n    ) {\n        const {\n            PageNo = 1,\n            PageSize = 100,\n            OrderByField = 'id',\n            IsAsc = false,\n            Filters = [],\n            Select = '*'\n        } = options;\n        \n        const tableName = TABLE_MAP[tableId] || tableId.toString();\n        const supabaseFilters = convertFilters(Filters);\n        \n        try {\n            const { data, count, error } = await SupabaseService.readRecords(\n                tableName as any,\n                {\n                    page: PageNo,\n                    pageSize: PageSize,\n                    orderBy: OrderByField as any,\n                    ascending: IsAsc,\n                    filters: supabaseFilters,\n                    select: Select\n                }\n            );\n            \n            if (error) {\n                return { data: null, error };\n            }\n            \n            return {\n                data: {\n                    List: data,\n                    VirtualCount: count\n                },\n                error: null\n            };\n        } catch (err) {\n            console.error(`Error in tablePage for ${tableName}:`, err);\n            return {\n                data: null,\n                error: err instanceof Error ? err.message : 'Unknown error'\n            };\n        }\n    }\n    \n    // Create record (replaces ezsite tableCreate)\n    static async tableCreate<T extends TableId>(tableId: T, payload: any) {\n        const tableName = TABLE_MAP[tableId] || tableId.toString();\n        \n        try {\n            const data = await SupabaseService.createRecord(tableName as any, payload);\n            return { data, error: null };\n        } catch (err) {\n            console.error(`Error in tableCreate for ${tableName}:`, err);\n            return {\n                data: null,\n                error: err instanceof Error ? err.message : 'Unknown error'\n            };\n        }\n    }\n    \n    // Update record (replaces ezsite tableUpdate)\n    static async tableUpdate<T extends TableId>(tableId: T, payload: any) {\n        const tableName = TABLE_MAP[tableId] || tableId.toString();\n        const { ID, id = ID, ...rest } = payload;\n        \n        try {\n            const result = await SupabaseService.updateRecord(tableName as any, id, rest);\n            return result;\n        } catch (err) {\n            console.error(`Error in tableUpdate for ${tableName}:`, err);\n            return {\n                data: null,\n                error: err instanceof Error ? err.message : 'Unknown error'\n            };\n        }\n    }\n    \n    // Delete record (replaces ezsite tableDelete)\n    static async tableDelete<T extends TableId>(tableId: T, { ID }: { ID: number }) {\n        const tableName = TABLE_MAP[tableId] || tableId.toString();\n        \n        try {\n            const result = await SupabaseService.deleteRecord(tableName as any, ID);\n            return result;\n        } catch (err) {\n            console.error(`Error in tableDelete for ${tableName}:`, err);\n            return {\n                error: err instanceof Error ? err.message : 'Unknown error'\n            };\n        }\n    }\n    \n    // File upload (replaces ezsite upload)\n    static async upload({ filename, file }: { filename: string; file: File }) {\n        try {\n            const path = `${Date.now()}_${filename}`;\n            const result = await SupabaseService.uploadFile('uploads', path, file);\n            \n            if (result.error) {\n                return { data: null, error: result.error };\n            }\n            \n            // Return the file path as the data (similar to ezsite behavior)\n            return { data: result.data?.path, error: null };\n        } catch (err) {\n            console.error('Error in upload:', err);\n            return {\n                data: null,\n                error: err instanceof Error ? err.message : 'Unknown error'\n            };\n        }\n    }\n    \n    // Send email (replaces ezsite sendEmail)\n    static async sendEmail(emailData: {\n        from: string;\n        to: string | string[];\n        subject: string;\n        html: string;\n        text?: string;\n    }) {\n        try {\n            return await EmailService.sendEmail(emailData);\n        } catch (err) {\n            console.error('Error in sendEmail:', err);\n            return {\n                data: null,\n                error: err instanceof Error ? err.message : 'Unknown error'\n            };\n        }\n    }\n    \n    // User registration (replaces ezsite register)\n    static async register(credentials: { email: string; password: string }) {\n        try {\n            return await AuthService.register(credentials);\n        } catch (err) {\n            console.error('Error in register:', err);\n            return {\n                data: null,\n                error: err instanceof Error ? err.message : 'Unknown error'\n            };\n        }\n    }\n    \n    // Get current user info (replaces ezsite getUserInfo)\n    static async getUserInfo() {\n        try {\n            return await AuthService.getCurrentUser();\n        } catch (err) {\n            console.error('Error in getUserInfo:', err);\n            return {\n                data: null,\n                error: err instanceof Error ? err.message : 'Unknown error'\n            };\n        }\n    }\n}\n\n// Export as default for easy importing\nexport default DatabaseService;\n"],"names":["TABLE_MAP","convertFilters","filters","filter","name","op","value","operator","DatabaseService","tableId","options","PageNo","PageSize","OrderByField","IsAsc","Filters","Select","tableName","supabaseFilters","data","count","error","SupabaseService","err","payload","ID","id","rest","filename","file","path","result","_a","emailData","EmailService","credentials","AuthService"],"mappings":"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"}